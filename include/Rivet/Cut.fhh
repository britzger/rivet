// -*- C++ -*-
#ifndef RIVET_Cut_FHH
#define RIVET_Cut_FHH

#include "Rivet/Rivet.hh"

namespace Rivet {

  /// Forward declaration
  class Cuts;

  /// Comparison operations. We're being clear about the <= and >= equality aspects
  /// since these will actually be implemented as inclusive binary cuts with EQUAL
  /// being translated into a matched "back-to-back" pair of inequalities.
  enum Comparison {
    LESS_EQ, MORE_EQ, EQUAL
  };

  
  /// String representations of the comparison enum values.
  inline const string toString(const Comparison& c) {
    switch(c) {
    case LESS_EQ:
      return "<=";
    case MORE_EQ:
      return ">=";
    case EQUAL:
      return "==";
    }
    return "";
  }

  /// Forward declare the ability to stream a Cuts object.
  ostream& operator<<(ostream& os, const Cuts& cuts);

  /// Method to write a Comparison to a stream.
  inline ostream& operator<<(ostream& os, const Comparison& comp) {
    os << toString(comp);
    return os;
  }
    
}

#endif
