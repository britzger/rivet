#! /usr/bin/env python

class Histo:
    def __init__(self):
        self._bins = []
        self.name = None
        self.title = None

    def __str__(self):
        out = "Histogram '%s' with %d bins\n" % (self.name, self.numBins())
        out += "Title: %s\n" % self.title
        out += "\n".join([str(b) for b in self.getBins()])
        return out

    def asFlat(self):
        out = "## Histogram '%s' with %d bins\n" % (self.name, self.numBins())
        out += "## Title: %s\n" % self.title
        out += "## xlow    xhigh    yval  yerrminus  yerrplus\n"
        out += "\n".join([b.asFlat() for b in self.getBins()])
        return out

    def numBins(self):
        return len(self._bins)

    def getBins(self):
        return sorted(self._bins)

    def setBins(self, bins):
        self._bins = bins
        return self

    def addBin(self, bin):
        self._bins.append(bin)
        return self

    def getBin(self, index):
        self._bins.sort()
        return self.getBins()[index]

    bins = property(getBins, setBins)

    def __iter__(self):
        return iter(self.getBins())

    def __len__(self):
        return len(self._bins)

    def __getitem__(self, index):
        return self.getBin(index)


class Bin:
    """A simple container for a binned value with an error."""
    def __init__(self, xlow=None, xhigh=None, yval=0, yerrplus=0, yerrminus=0, focus=None):
        self.xlow = xlow
        self.xhigh= xhigh
        self.yval = yval
        self.yerrplus = yerrplus
        self.yerrminus = yerrminus
        self.focus= focus

    def __str__(self):
        out = "%f to %f: %f +- %f" % (self._xlow, self._xhigh, self._yval, self._yerr)
        return out

    def asFlat(self):
        out = "%f %f %f %f %f" % (self.xlow, self.xhigh, self.yval, self.yerrminus, self.yerrplus)
        return out

    def __cmp__(self, other):
        """Sort by mean x value (yeah, I know...)"""
        return (self.xlow + self.xhigh) > (other.xlow + other.xhigh)

    def getXRange(self):
        return (self.xlow, self.xhigh)

    def setXRange(self, xlow, xhigh):
        self.xlow = xlow
        self.xhigh = xhigh
        return self

    def getBinCenter(self):
        """Geometric middle of the bin range."""
        return self._xlow + .5*(self._xhigh - self._xlow)

    def getFocus(self):
        """Mean x-value of the bin."""
        if self.focus is not None:
            return (self.xlow + self.xhigh)/2.0
        else:
            return self.focus

    def getYErr(self):
        """Get mean of +ve and -ve y-errors."""
        return self._yerr

    def setYErr(self, yerr):
        """Set both +ve and -ve y-errors simultaneously."""
        self.yerrplus = yerr
        self.yerrminus = yerr
        return self



## Try to load faster but non-standard cElementTree module
try:
    import xml.etree.cElementTree as ET
except ImportError:
    try:
        import cElementTree as ET
    except ImportError:
        import xml.etree.ElementTree as ET



def mkHistoFromDPS(dps):
    """Make a mini histo representation from an AIDA dataPointSet tag."""
    myhist = Histo()
    myhist.name = dps.get("name")
    myhist.title = dps.get("title")
    points = dps.findall("dataPoint")
    numbins = len(points)
    for binnum, point in enumerate(points):
        bin = Bin()
        for d, m in enumerate(point.findall("measurement")):
            val  = float(m.get("value"))
            down = float(m.get("errorMinus"))
            up = float(m.get("errorPlus"))
            if d == 0:
                low  = val - down
                high = val + up
                bin.setXRange(low, high)
            elif d == 1:
                bin.yval = val
                bin.yerrplus = up
                bin.yerrplus = down
        myhist.addBin(bin)
    return myhist


import sys, os
from optparse import OptionParser
parser = OptionParser(usage="%prog aidafile [aidafile2 ...]")
parser.add_option("-s", "--smart-output", action="store_true", default=False, 
                  help="Write to output files with names based on the corresponding input filename", 
                  dest="SMARTOUTPUT")
opts, args = parser.parse_args()

if len(args) < 1:
    sys.stderr.write("Must specity at least one AIDA histogram file\n")
    sys.exit(1)

for aidafile in args:
    out = sys.stdout
    if opts.SMARTOUTPUT:
        out = open(os.path.basename(aidafile).replace(".aida", ".dat"), "w")
    tree = ET.parse(aidafile)
    histos = []
    for dps in tree.findall("dataPointSet"):
        dpsname = dps.get("path") + "/" + dps.get("name")
        histos.append(mkHistoFromDPS(dps))
    out.write("\n\n".join([h.asFlat() for h in sorted(histos)]))
    out.write("\n")
    if opts.SMARTOUTPUT:
        out.close()
