#! /usr/bin/env python

from optparse import OptionParser, OptionGroup
import sys, os, glob, shutil
from subprocess import Popen, PIPE

## Try to load faster but non-standard cElementTree module
try:
    import xml.etree.cElementTree as ET
except ImportError:
    try:
        import cElementTree as ET
    except ImportError:
        try:
            import xml.etree.ElementTree as ET
        except:
            sys.stderr.write("Can't load the ElementTree XML parser: please install it!\n")
            sys.exit(1)


usage = """Webpages from histogram files written out by Rivet.
You can specify multiple Monte Carlo AIDA files to be compared. Reference data
should be found automatically.

Examples:
  source /path/to/rivetenv.sh
  %prog [options] <aidafile1> [<aidafile2> <aidafile3>...]
"""


parser = OptionParser(usage=usage)
parser.add_option("-o", "--outputdir", dest="OUTPUTDIR",
                  default="./plots", help="directory for webpage output.")
parser.add_option("-c", "--config", dest="CONFIGFILES", action="append", default=["~/.make-plots"],
                  help="Plot config file(s) to be used with make-plots.")


opts, aidafiles = parser.parse_args()

if os.environ.has_key('RIVET_REF_PATH'):
    refpaths = os.environ['RIVET_REF_PATH'].split(":")
else:
    refpaths = []
try:
    datadir = Popen(["rivet-config", "--datadir"], stdout=PIPE).communicate()[0].split()[0]
    refpaths.append(datadir)
except:
    pass
if not refpaths:
    print "Error: Didn't find rivet-config. Have you sourced rivetenv.sh?"
    sys.exit(1)

try:
    os.makedirs(opts.OUTPUTDIR)
except:
    print "Error: Directory '%s' already exists. Set -o to something else." % opts.OUTPUTDIR
    sys.exit(1)

## get set of analyses/reffiles involved in the runs
analyses = set()
reffiles = list()
labels = []
for aidafile in aidafiles:
    aidafilepath = os.path.abspath(aidafile.split(":")[0])
    if not os.access(aidafilepath, os.R_OK):
        print "Error: cannot read from %s" % aidafilepath
        sys.exit(2)
    tree = ET.parse(aidafilepath)
    for dps in tree.findall("dataPointSet"):
        path = dps.get("path")
        analysis = path[path.rfind("/")+1:]
        analyses.add(analysis)
        for refpath in refpaths:
            if os.access(os.path.join(refpath, analysis+".aida"), os.R_OK):
                reffiles.append("%s/%s.aida" % (refpath, analysis))
                break


## run compare-histos to get plain .dat files from .aida
ch_cmd = ["compare-histos"]
ch_cmd.append("--mc-errs")
ch_cmd.append("--hier-out")
ch_cmd.append("--plot-info-dir=../")
if len(aidafiles)+len(reffiles) < 2:
    ch_cmd.append("--show-ref-only")
    ch_cmd.append("--no-ratio")
for file in aidafiles+reffiles:
    ch_cmd.append("%s" % os.path.abspath(file))
Popen(ch_cmd, cwd=opts.OUTPUTDIR).wait()

style = """<style>
  html { font-family: sans-serif; }
  img { border: 0; }
</style>"""

index = open(os.path.join(opts.OUTPUTDIR, "index.html"), "w")
index.write('<html>\n<head>\n<title>%s</title>\n%s</head>\n<body>' % (opts.OUTPUTDIR, style))
for analysis in sorted(analyses):
    anapath = os.path.join(opts.OUTPUTDIR, analysis)
    anaindex = open(os.path.join(anapath, "index.html"), 'w')
    anaindex.write('<html>\n<head>\n<title>%s - %s</title>\n%s</head>\n<body>' % (opts.OUTPUTDIR, analysis, style))

    datfiles = glob.glob("%s/*.dat" % anapath)
    for fulldatfile in sorted(datfiles):
        datfile = os.path.basename(fulldatfile)

        ## make-plots run for each .dat file
        mp_cmd = ["make-plots"]
        mp_cmd.append("--full-range")
        for configfile in opts.CONFIGFILES:
            if os.access(os.path.expanduser(configfile), os.R_OK):
                mp_cmd.append("-c")
                mp_cmd.append(os.path.expanduser(configfile))
        mp_cmd.append(datfile)
        Popen(mp_cmd, cwd=anapath).wait()

        psfile = datfile.replace(".dat", ".ps")
        if os.access(os.path.join(anapath, psfile), os.R_OK):
            # Convert to png and add to web page
            pngfile = datfile.replace(".dat", ".png")
            Popen(["convert", "-density", "100", psfile, pngfile], cwd=anapath)
            anaindex.write('  <div style="float:left;">')
            anaindex.write('<a href="%s" style="font-size:smaller; text-decoration:none; font-weight:bold;">' % psfile)
            anaindex.write('%s:<br><img border="0" src="%s"></a></div>\n' % (psfile, pngfile))

    anaindex.write("</body>\n</html>\n")
    index.write('<h1><a href="%s/index.html" style="text-decoration:none;">%s</a></h1>\n' %(analysis, analysis))
    description = Popen(["rivet", "--show-analysis", analysis], stdout=PIPE).communicate()[0]
    index.write('<p style="white-space: pre;">%s</p>\n' % description)
index.write('</body>\n</html>')
