#! /usr/bin/env python

import sys, os, logging
from optparse import OptionParser, OptionGroup

usage="""Run Rivet analyses on inputted events from file or Unix pipe

Examples:
  %prog [options] <hepmcfile> [<hepmcfile> ...]
  my_generator -o myfifo & \ %prog [options] myfifo
  Eventually: my_generator | %prog [options]

TODO:
  * Interface Log object and provide CLI logging control
  * Handle signals
"""


## Try importing non-standard HEP Python packages
PROGPATH = sys.argv[0]
PROGNAME = os.path.basename(PROGPATH)
try:
    import rivet, hepmc
except:
    sys.stderr.write(PROGNAME + " requires the 'hepmc' and 'rivet' Python modules\n");
    sys.exit(1)


## Parse command line options
parser = OptionParser(usage=usage)
parser.add_option("-n", "--number", dest="MAXEVTNUM", type=int,
                  default=None, metavar="NUM", 
                  help="max number of events to read.")
parser.add_option("-a", "--analysis", dest="ANALYSES", action="append",
                  default=[], metavar="ANA",
                  help="add an analysis to the processing list.")
parser.add_option("-l", "--list-analyses", dest="LIST_ANALYSES", action="store_true",
                  default=False, help="show the list of available analyses")
## TODO: allow user to specify file extension
parser.add_option("-H", "--histo-file", dest="HISTOFILE", 
                  default="Rivet", help="specify the output histo file path")
verbgroup = OptionGroup(parser, "Verbosity control")
verbgroup.add_option("-V", "--verbose", action="store_const", const=logging.DEBUG, dest="LOGLEVEL",
                     default=logging.INFO, help="print debug (very verbose) messages")
verbgroup.add_option("-Q", "--quiet", action="store_const", const=logging.WARNING, dest="LOGLEVEL",
                     default=logging.INFO, help="be very quiet")
parser.add_option_group(verbgroup)
(opts, args) = parser.parse_args()
logging.basicConfig(level=opts.LOGLEVEL, format="%(message)s")


## List of analyses
all_analyses = rivet.AnalysisLoader.getAllAnalysisNames()
if opts.LIST_ANALYSES:
    for a in all_analyses:
        print a
    sys.exit(0)


## Identify HepMC files/streams
## TODO: check readability, deal with stdin
if len(args) > 0:
    HEPMCFILES = args
else:
    HEPMCFILES = ["-"]


## Set up analysis handler
ah = rivet.AnalysisHandler(opts.HISTOFILE)
for a in opts.ANALYSES:
    a_up = a.upper()
    if not a_up in all_analyses:
        print "'%s' is not a valid analysis. Available analyses are:" % a_up
        for aa in all_analyses:
            print "    %s" % aa
        sys.exit(1)
    logging.info("Adding analysis '%s'" % a_up)
    ah.addAnalysis(a_up)
logging.info("Need cross-section? %s" % ah.needCrossSection())
ah.init()


def logNEvt(n):
    nevtloglevel = logging.DEBUG
    if n % 10 == 0:
        nevtloglevel = logging.DEBUG + 5
    if n % 100 == 0:
        nevtloglevel = logging.INFO
    if n % 200 == 0:
        nevtloglevel = logging.INFO + 5
    if n % 500 == 0:
        nevtloglevel = logging.WARNING
    if n % 1000 == 0:
        nevtloglevel = logging.WARNING + 5
    if n % 10000 == 0:
        nevtloglevel = logging.WARNING + 15
    logging.log(nevtloglevel, "Event %d" % n)


## Read and process events
EVTNUM = 0
for evtfile in HEPMCFILES:
    logging.info("Reading events from '%s'" % evtfile)
    r = hepmc.IO_GenEvent(evtfile, "r")
    while opts.MAXEVTNUM is None or EVTNUM < opts.MAXEVTNUM:
        EVTNUM += 1
        logNEvt(EVTNUM)
        if r.rdstate() != 0:
            logging.warning("Read error on file '%s'" % evtfile)
            break
        evt = r.get_next_event()
        #evt.use_units(GEV, MM)
        ah.analyze(evt);


## Did we get enough events?
if EVTNUM < opts.MAXEVTNUM:
    logging.warning("Sampled fewer events (%d) than expected (%d)" % (EVTNUM, opts.MAXEVTNUM))


## Finalize and write out data file
ah.finalize()
ah.commitData();
