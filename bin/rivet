#! /usr/bin/env python

import sys, os
import logging, signal
from optparse import OptionParser, OptionGroup

version="1.1.2"
usage="""Run Rivet analyses on inputted events from file or Unix pipe

Examples:
  %prog [options] <hepmcfile> [<hepmcfile> ...]
  my_generator -o myfifo & \ %prog [options] myfifo
  Eventually: my_generator | %prog [options]

TODO:
 * ?
"""


## Try importing non-standard HEP Python packages
PROGPATH = sys.argv[0]
PROGNAME = os.path.basename(PROGPATH)
try:
    import rivet
except:
    sys.stderr.write(PROGNAME + " requires the 'rivet' Python module\n");
    sys.exit(1)
try:
    import hepmc
except:
    sys.stderr.write(PROGNAME + " requires the 'hepmc' Python module\n");
    sys.exit(1)


## Parse command line options
parser = OptionParser(usage=usage, version="rivet v%s" % version)
parser.add_option("-n", "--number", dest="MAXEVTNUM", type=int,
                  default=None, metavar="NUM", 
                  help="max number of events to read.")
parser.add_option("-a", "--analysis", dest="ANALYSES", action="append",
                  default=[], metavar="ANA",
                  help="add an analysis to the processing list.")
parser.add_option("--list-options", dest="LIST_OPTIONS", action="store_true",
                  default=False, help="show the available option switches for auto-parsing by 'complete'")
parser.add_option("--list-analyses", dest="LIST_ANALYSES", action="store_true",
                  default=False, help="show the list of available analyses")
parser.add_option("-x", "--cross-section", dest="CROSS_SECTION", type=float,
                  default=None, metavar="XS",
                  help="specify the signal process cross-section in pb")
## TODO: allow user to specify histo file extension
parser.add_option("-H", "--histo-file", dest="HISTOFILE", 
                  default="Rivet", help="specify the output histo file path")
verbgroup = OptionGroup(parser, "Verbosity control")
parser.add_option("-l", dest="NATIVE_LOG_STRS", action="append",
                  default=[], help="set a log level in the Rivet library")
verbgroup.add_option("-V", "--verbose", action="store_const", const=logging.DEBUG, dest="LOGLEVEL",
                     default=logging.INFO, help="print debug (very verbose) messages")
verbgroup.add_option("-Q", "--quiet", action="store_const", const=logging.WARNING, dest="LOGLEVEL",
                     default=logging.INFO, help="be very quiet")
parser.add_option_group(verbgroup)
opts, args = parser.parse_args()
logging.basicConfig(level=opts.LOGLEVEL, format="%(message)s")


## Control native Rivet library logger
for l in opts.NATIVE_LOG_STRS:
    try:
        name, level = l.split("=")
        ## Get right error type
        LEVEL = level.upper()
        if LEVEL == "TRACE":
            level = rivet.Log.TRACE
        elif LEVEL == "DEBUG":
            level = rivet.Log.DEBUG
        elif LEVEL == "INFO":
            level = rivet.Log.INFO
        elif LEVEL == "WARNING":
            level = rivet.Log.WARNING
        elif LEVEL == "ERROR":
            level = rivet.Log.ERROR
        else:
            level = int(level)
        ## Fix name
        if not name.startswith("Rivet."):
            name = "Rivet." + name
        rivet.Log.setLogLevel(name, level)
    except:
        logging.warning("Couldn't process logging string '%s'" % l)


## Print the available CLI options!
#if opts.LIST_OPTIONS:
#    for o in parser.option_list:
#        print o.get_opt_string()
#    sys.exit(0)


## Set up signal handling
RECVD_KILL_SIGNAL = None
def handleKillSignal(signum, frame):
    "Declare us as having been signalled, and return to default handling behaviour"
    logging.critical("Signal handler called with signal " + str(signum))
    RECVD_KILL_SIGNAL = signum
    signal.signal(signum, signal.SIG_DFL)
## Signals to handle
signal.signal(signal.SIGTERM, handleKillSignal);
signal.signal(signal.SIGHUP,  handleKillSignal);
signal.signal(signal.SIGINT,  handleKillSignal);
signal.signal(signal.SIGUSR2, handleKillSignal);


## List of analyses
all_analyses = rivet.AnalysisLoader.getAllAnalysisNames()
if opts.LIST_ANALYSES:
    for a in all_analyses:
        print a
    sys.exit(0)


## Identify HepMC files/streams
## TODO: check readability, deal with stdin
if len(args) > 0:
    HEPMCFILES = args
else:
    HEPMCFILES = ["-"]


## Set up analysis handler
ah = rivet.AnalysisHandler(opts.HISTOFILE)
for a in opts.ANALYSES:
    a_up = a.upper()
    if not a_up in all_analyses:
        print "'%s' is not a valid analysis. Available analyses are:" % a_up
        for aa in all_analyses:
            print "    %s" % aa
        sys.exit(1)
    logging.info("Adding analysis '%s'" % a_up)
    ah.addAnalysis(a_up)
ah.init()


## Cross-section
if ah.needCrossSection():
    xs = opts.CROSS_SECTION
    if xs is None:
        try:
            xs = raw_input("Please specify the cross-section in pb: ")
            xs = float(xs)
            if xs <= 0:
                raise ValueError("Cross-section %e is not a positive number")
        except:
            logging.error("Invalid cross-section: %s" % xs)
            sys.exit(2)
    ah.setCrossSection(xs)
        

## Event number logging
def logNEvt(n):
    nevtloglevel = logging.DEBUG
    if n % 10 == 0:
        nevtloglevel = logging.DEBUG + 5
    if n % 100 == 0:
        nevtloglevel = logging.INFO
    if n % 200 == 0:
        nevtloglevel = logging.INFO + 5
    if n % 500 == 0:
        nevtloglevel = logging.WARNING
    if n % 1000 == 0:
        nevtloglevel = logging.WARNING + 5
    if n % 10000 == 0:
        nevtloglevel = logging.CRITICAL
    logging.log(nevtloglevel, "Event %d" % n)


## Read and process events
EVTNUM = 0
for evtfile in HEPMCFILES:
    logging.info("Reading events from '%s'" % evtfile)
    r = hepmc.IO_GenEvent(evtfile, "r")
    while opts.MAXEVTNUM is None or EVTNUM < opts.MAXEVTNUM:
        EVTNUM += 1
        logNEvt(EVTNUM)
        if r.rdstate() != 0:
            logging.warning("Read error on file '%s'" % evtfile)
            break
        evt = r.get_next_event()
        #evt.use_units(GEV, MM)
        ah.analyze(evt);
        if RECVD_KILL_SIGNAL is not None:
            logging.critical("Leaving event loop early due to signal " + str(RECVD_KILL_SIGNAL))
            break
    if RECVD_KILL_SIGNAL is not None:
        break
logging.info("Finished event loop")


## Did we get enough events?
if EVTNUM < opts.MAXEVTNUM:
    logging.warning("Sampled fewer events (%d) than expected (%d)" % (EVTNUM, opts.MAXEVTNUM))


## Finalize and write out data file
ah.finalize()
ah.commitData();
