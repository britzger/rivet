#! /usr/bin/env python

# TODO: Rewrite or remove -- this is not a "proper" statistical run merger but a hard-coded binwise histo patching hack

"""%prog

Script for merging parts of multiple histo files made with different run params
(kinematic pT cuts and energies) into one histo file for plotting or further
analysis.

TODO:
 * rewrite to use YODA histogram objects and formats
 * take merge specs from a conf file instead of hard-coding
 * generalise to more generic merge ranges (i.e. not just sqrts & pT)
 * improve cmd line interface

Usage example:
 $ uemerge hwpp/hpp-1800-{030.aida:1800:30,090.aida:1800:90} > hpp-hists.dat
 $ flat2aida hpp-hists.dat
 $ mkdir plots && cd plots
 $ compare_histos.py ../ref04.aida ../hpp-hists.aida
 $ make_plot.py --pdf *.dat
"""

import rivet, sys, os
rivet.util.check_python_version()
rivet.util.set_process_name(os.path.basename(__file__))

import copy, re
from math import sqrt


def mean(*args):
    total, num = 0, 0
    for a in args:
        if a is not None:
            total += a
            num += 1
    return total / float(num)


def fillAbove(desthisto, sourcehistosbyptmin):
    for i, b in enumerate(desthisto.getBins()):
        ## Fill bins with pT-ordered histos (so that 'highest always wins')
        for ptmin, h in sorted(sourcehistosbyptmin.iteritems()):
            newb = h.getBin(i)
            if newb.xlow >= float(ptmin):
                desthisto.setBin(i, newb)

def mergeByPt(hpath, sqrts):
    global inhistos
    global outhistos
    try:
        fillAbove(outhistos[hpath], inhistos[hpath][sqrts])
    except:
        pass

def useOnePt(hpath, sqrts, ptmin):
    global inhistos
    global outhistos
    try:
        ## Find best pT_min match
        ptmins = inhistos[hpath][sqrts].keys()
        closest_ptmin = None
        for ptm in ptmins:
            if closest_ptmin is None or \
                    abs(float(ptm)-float(ptmin)) < abs(closest_ptmin-float(ptmin)):
                closest_ptmin = float(ptm)
        if closest_ptmin != float(ptmin):
            logging.warning("Inexact match for requested pTmin=%s: " % ptmin + \
                                "using pTmin=%e instead" % closest_ptmin)
        outhistos[hpath] =  inhistos[hpath][sqrts][closest_ptmin]
    except:
        pass



#######################################




if __name__ == "__main__":
    import logging
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(usage="%prog aidafile:sqrts:minpt aidafile2:sqrts:minpt [...]")
    parser.add_option("-o", "--out", dest="OUTFILE", default="-")
    parser.add_option("--append", dest="APPEND_OUTPUT", action="store_true", default=False)
    verbgroup = OptionGroup(parser, "Verbosity control")
    verbgroup.add_option("-v", "--verbose", action="store_const", const=logging.DEBUG, dest="LOGLEVEL",
                         default=logging.INFO, help="print debug (very verbose) messages")
    verbgroup.add_option("-q", "--quiet", action="store_const", const=logging.WARNING, dest="LOGLEVEL",
                         default=logging.INFO, help="be very quiet")
    parser.add_option_group(verbgroup)
    (opts, args) = parser.parse_args()
    logging.basicConfig(level=opts.LOGLEVEL, format="%(message)s")


    ## Prefix used in dat file headers
    headerprefix = "# "

    ## Check args
    if len(args) < 1:
        logging.error("Must specify at least one AIDA histogram file")
        sys.exit(1)

    ## Get histos
    inhistos = {}
    weights = {}
    try:
        for aidafile_ptmin in args:
            aidafile, sqrts, ptmin = None, None, None
            try:
                aidafile, sqrts, ptmin = aidafile_ptmin.rsplit(":", 2)
            except ValueError, v:
                raise Exception("Did you supply the file arguments in the 'name:sqrts:ptmin' format?")


            ## Parse this AIDA file as XML
            if not os.access(aidafile, os.R_OK):
                logging.error("%s can not be read" % aidafile)
                break
            try:
                tree = ET.parse(aidafile)
            except:
                logging.error("%s can not be parsed as XML" % aidafile)
                break
            tree = ET.parse(aidafile)


            ## Get histos from this AIDA file
            for dps in tree.findall("dataPointSet"):
                h = mkHistoFromDPS(dps)
                if not inhistos.has_key(h.fullPath()):
                    inhistos[h.fullPath()] = {}
                tmpE = inhistos[h.fullPath()]
                if not tmpE.has_key(sqrts):
                    tmpE[sqrts] = {}
                tmpP = tmpE[sqrts]
                if not tmpP.has_key(float(ptmin)):
                    tmpP[float(ptmin)] = h
                else:
                    raise Exception("A set with sqrt(s) = %s, and ptmin = %s already exists" % (sqrts, ptmin))
    except Exception, e:
        logging.error("Danger, Will Robinson!")
        logging.error(str(e))
        sys.exit(1)


    ## Make empty output histos
    outhistos = {}
    for hpath, hsets in sorted(inhistos.iteritems()):
        logging.debug(hpath + " " + str(dict([(sqrts, hsets[sqrts].keys()) for sqrts in hsets.keys()])))
        workhisto = copy.deepcopy(hsets.values()[0].values()[0])
        logging.debug(workhisto)
        outhistos[hpath] = workhisto
        ## There's no reason to merge reference histos
        if re.match(r'^/REF.*', hpath):
            continue
        ## Empty the bin set for histos which we're going to merge
        for b in outhistos[hpath]:
            b.clear()
        logging.debug(outhistos[hpath])


    ######

    ## ATLAS dijet azimuthal decorrelation
    useOnePt("/ATLAS_2011_S8971293/d01-x01-y01", "7000", "110")
    useOnePt("/ATLAS_2011_S8971293/d01-x01-y02", "7000", "160")
    useOnePt("/ATLAS_2011_S8971293/d01-x01-y03", "7000", "210")
    useOnePt("/ATLAS_2011_S8971293/d01-x01-y04", "7000", "260")
    useOnePt("/ATLAS_2011_S8971293/d01-x01-y05", "7000", "310")
    useOnePt("/ATLAS_2011_S8971293/d01-x01-y06", "7000", "400")
    useOnePt("/ATLAS_2011_S8971293/d01-x01-y07", "7000", "500")
    useOnePt("/ATLAS_2011_S8971293/d01-x01-y08", "7000", "600")
    useOnePt("/ATLAS_2011_S8971293/d01-x01-y09", "7000", "800")

    ## ATLAS jet shapes
    useOnePt("/ATLAS_2011_S8924791/d01-x01-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d01-x01-y02", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d01-x02-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d01-x02-y02", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d01-x03-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d01-x03-y02", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d01-x04-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d01-x04-y02", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d01-x05-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d01-x05-y02", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d01-x06-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d01-x06-y02", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d02-x01-y01", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d02-x01-y02", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d02-x02-y01", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d02-x02-y02", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d02-x03-y01", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d02-x03-y02", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d02-x04-y01", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d02-x04-y02", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d02-x05-y01", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d02-x05-y02", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d02-x06-y01", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d02-x06-y02", "7000", "40")
    useOnePt("/ATLAS_2011_S8924791/d03-x01-y01", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d03-x01-y02", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d03-x02-y01", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d03-x02-y02", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d03-x03-y01", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d03-x03-y02", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d03-x04-y01", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d03-x04-y02", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d03-x05-y01", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d03-x05-y02", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d03-x06-y01", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d03-x06-y02", "7000", "60")
    useOnePt("/ATLAS_2011_S8924791/d04-x01-y01", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d04-x01-y02", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d04-x02-y01", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d04-x02-y02", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d04-x03-y01", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d04-x03-y02", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d04-x04-y01", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d04-x04-y02", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d04-x05-y01", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d04-x05-y02", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d04-x06-y01", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d04-x06-y02", "7000", "80")
    useOnePt("/ATLAS_2011_S8924791/d05-x01-y01", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d05-x01-y02", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d05-x02-y01", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d05-x02-y02", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d05-x03-y01", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d05-x03-y02", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d05-x04-y01", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d05-x04-y02", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d05-x05-y01", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d05-x05-y02", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d05-x06-y01", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d05-x06-y02", "7000", "110")
    useOnePt("/ATLAS_2011_S8924791/d06-x01-y01", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d06-x01-y02", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d06-x02-y01", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d06-x02-y02", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d06-x03-y01", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d06-x03-y02", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d06-x04-y01", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d06-x04-y02", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d06-x05-y01", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d06-x05-y02", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d06-x06-y01", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d06-x06-y02", "7000", "160")
    useOnePt("/ATLAS_2011_S8924791/d07-x01-y01", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d07-x01-y02", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d07-x02-y01", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d07-x02-y02", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d07-x03-y01", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d07-x03-y02", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d07-x04-y01", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d07-x04-y02", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d07-x05-y01", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d07-x05-y02", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d07-x06-y01", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d07-x06-y02", "7000", "210")
    useOnePt("/ATLAS_2011_S8924791/d08-x01-y01", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d08-x01-y02", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d08-x02-y01", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d08-x02-y02", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d08-x03-y01", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d08-x03-y02", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d08-x04-y01", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d08-x04-y02", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d08-x05-y01", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d08-x05-y02", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d08-x06-y01", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d08-x06-y02", "7000", "260")
    useOnePt("/ATLAS_2011_S8924791/d09-x01-y01", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d09-x01-y02", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d09-x02-y01", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d09-x02-y02", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d09-x03-y01", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d09-x03-y02", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d09-x04-y01", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d09-x04-y02", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d09-x05-y01", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d09-x05-y02", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d09-x06-y01", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d09-x06-y02", "7000", "310")
    useOnePt("/ATLAS_2011_S8924791/d10-x01-y01", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d10-x01-y02", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d10-x02-y01", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d10-x02-y02", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d10-x03-y01", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d10-x03-y02", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d10-x04-y01", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d10-x04-y02", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d10-x05-y01", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d10-x05-y02", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d10-x06-y01", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d10-x06-y02", "7000", "400")
    useOnePt("/ATLAS_2011_S8924791/d11-x01-y01", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d11-x01-y02", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d11-x02-y01", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d11-x02-y02", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d11-x03-y01", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d11-x03-y02", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d11-x04-y01", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d11-x04-y02", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d11-x05-y01", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d11-x05-y02", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d11-x06-y01", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d11-x06-y02", "7000", "500")
    useOnePt("/ATLAS_2011_S8924791/d12-x01-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d12-x01-y02", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d12-x02-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d12-x02-y02", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d12-x03-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d12-x03-y02", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d12-x04-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d12-x04-y02", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d12-x05-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d12-x05-y02", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d12-x06-y01", "7000", "30")
    useOnePt("/ATLAS_2011_S8924791/d12-x06-y02", "7000", "30")

    ## Field analysis
    logging.info("Processing CDF_2001_S4751469")
    ## Angular distributions in different pT bins
    useOnePt("/CDF_2001_S4751469/d01-x01-y01", "1800", "0")
    useOnePt("/CDF_2001_S4751469/d01-x01-y02", "1800", "0")
    useOnePt("/CDF_2001_S4751469/d01-x01-y03", "1800", "30")
    useOnePt("/CDF_2001_S4751469/d02-x01-y01", "1800", "0")
    useOnePt("/CDF_2001_S4751469/d02-x01-y02", "1800", "0")
    useOnePt("/CDF_2001_S4751469/d02-x01-y03", "1800", "30")
    ## Number, profile in pT_lead (True?)
    useOnePt("/CDF_2001_S4751469/d03-x01-y01", "1800", "0")
    useOnePt("/CDF_2001_S4751469/d03-x01-y02", "1800", "0")
    useOnePt("/CDF_2001_S4751469/d03-x01-y03", "1800", "0")
    mergeByPt("/CDF_2001_S4751469/d04-x01-y01", "1800")
    mergeByPt("/CDF_2001_S4751469/d04-x01-y02", "1800")
    mergeByPt("/CDF_2001_S4751469/d04-x01-y03", "1800")
    ## pT sums, profile in pT_lead (True?)
    useOnePt("/CDF_2001_S4751469/d05-x01-y01", "1800", "0")
    useOnePt("/CDF_2001_S4751469/d05-x01-y02", "1800", "0")
    useOnePt("/CDF_2001_S4751469/d05-x01-y03", "1800", "0")
    mergeByPt("/CDF_2001_S4751469/d06-x01-y01", "1800")
    mergeByPt("/CDF_2001_S4751469/d06-x01-y02", "1800")
    mergeByPt("/CDF_2001_S4751469/d06-x01-y03", "1800")
    ## pT distributions (use a specific pT cut run?)
    useOnePt("/CDF_2001_S4751469/d07-x01-y01", "1800", "0")
    useOnePt("/CDF_2001_S4751469/d07-x01-y02", "1800", "0")
    useOnePt("/CDF_2001_S4751469/d07-x01-y03", "1800", "30")

    ## Acosta analysis
    logging.info("Processing CDF_2004_S5839831")
    ## Mean pT, profile in ET_lead
    mergeByPt("/CDF_2004_S5839831/d01-x01-y01", "1800")
    mergeByPt("/CDF_2004_S5839831/d01-x01-y02", "1800")
    ## pT_max,min, profiles in ET_lead
    mergeByPt("/CDF_2004_S5839831/d02-x01-y01", "1800")
    mergeByPt("/CDF_2004_S5839831/d02-x01-y02", "1800")
    mergeByPt("/CDF_2004_S5839831/d02-x01-y03", "1800")
    ## pT distributions (want to use a specific pT cut run)
    useOnePt("/CDF_2004_S5839831/d03-x01-y01", "1800", "40")
    useOnePt("/CDF_2004_S5839831/d03-x01-y02", "1800", "80")
    useOnePt("/CDF_2004_S5839831/d03-x01-y03", "1800", "120")
    useOnePt("/CDF_2004_S5839831/d03-x01-y04", "1800", "160")
    useOnePt("/CDF_2004_S5839831/d03-x01-y05", "1800", "200")
    ## N_max,min, profiles in ET_lead
    mergeByPt("/CDF_2004_S5839831/d04-x01-y01", "1800")
    mergeByPt("/CDF_2004_S5839831/d04-x01-y02", "1800")
    ## Min bias dbs (want to use min bias pT cut)
    useOnePt("/CDF_2004_S5839831/d05-x01-y01", "1800", "0")
    useOnePt("/CDF_2004_S5839831/d06-x01-y01", "1800", "0")
    ## Swiss Cheese, profile in ET_lead
    mergeByPt("/CDF_2004_S5839831/d07-x01-y01", "1800")
    mergeByPt("/CDF_2004_S5839831/d07-x01-y02", "1800")
    ## pT_max,min, profiles in ET_lead
    mergeByPt("/CDF_2004_S5839831/d08-x01-y01", "630")
    mergeByPt("/CDF_2004_S5839831/d08-x01-y02", "630")
    mergeByPt("/CDF_2004_S5839831/d08-x01-y03", "630")
    ## Swiss Cheese, profile in ET_lead
    mergeByPt("/CDF_2004_S5839831/d09-x01-y01", "630")
    mergeByPt("/CDF_2004_S5839831/d09-x01-y02", "630")
    ## Min bias dbs (want to use min bias pT cut)
    useOnePt("/CDF_2004_S5839831/d10-x01-y01", "630", "0")
    useOnePt("/CDF_2004_S5839831/d11-x01-y01", "630", "0")

    ## CDF jet shape analysis
    logging.info("Processing CDF_2005_S6217184")
    useOnePt("/CDF_2005_S6217184/d01-x01-y01", "1960", "37")
    useOnePt("/CDF_2005_S6217184/d01-x01-y02", "1960", "37")
    useOnePt("/CDF_2005_S6217184/d01-x01-y03", "1960", "37")
    useOnePt("/CDF_2005_S6217184/d02-x01-y01", "1960", "63")
    useOnePt("/CDF_2005_S6217184/d02-x01-y02", "1960", "63")
    useOnePt("/CDF_2005_S6217184/d02-x01-y03", "1960", "63")
    useOnePt("/CDF_2005_S6217184/d03-x01-y01", "1960", "63")
    useOnePt("/CDF_2005_S6217184/d03-x01-y02", "1960", "112")
    useOnePt("/CDF_2005_S6217184/d03-x01-y03", "1960", "112")
    useOnePt("/CDF_2005_S6217184/d04-x01-y01", "1960", "112")
    useOnePt("/CDF_2005_S6217184/d04-x01-y02", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d04-x01-y03", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d05-x01-y01", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d05-x01-y02", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d05-x01-y03", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d06-x01-y01", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d06-x01-y02", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d06-x01-y03", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d07-x01-y01", "1960", "37")
    useOnePt("/CDF_2005_S6217184/d07-x01-y02", "1960", "37")
    useOnePt("/CDF_2005_S6217184/d07-x01-y03", "1960", "37")
    useOnePt("/CDF_2005_S6217184/d08-x01-y01", "1960", "63")
    useOnePt("/CDF_2005_S6217184/d08-x01-y02", "1960", "63")
    useOnePt("/CDF_2005_S6217184/d08-x01-y03", "1960", "63")
    useOnePt("/CDF_2005_S6217184/d09-x01-y01", "1960", "63")
    useOnePt("/CDF_2005_S6217184/d09-x01-y02", "1960", "112")
    useOnePt("/CDF_2005_S6217184/d09-x01-y03", "1960", "112")
    useOnePt("/CDF_2005_S6217184/d10-x01-y01", "1960", "112")
    useOnePt("/CDF_2005_S6217184/d10-x01-y02", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d10-x01-y03", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d11-x01-y01", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d11-x01-y02", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d11-x01-y03", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d12-x01-y01", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d12-x01-y02", "1960", "166")
    useOnePt("/CDF_2005_S6217184/d12-x01-y03", "1960", "166")
    mergeByPt("/CDF_2005_S6217184/d13-x01-y01", "1960")

    ## CDF dijet mass spectrum
    mergeByPt("/CDF_2008_S8093652/d01-x01-y01", "1960")

    ## Rick Field Run-II Leading Jets UE analysis
    logging.info("Processing CDF_2010_S8591881_QCD")
    ## charged particle density
    mergeByPt("/CDF_2010_S8591881_QCD/d10-x01-y01", "1960")
    mergeByPt("/CDF_2010_S8591881_QCD/d10-x01-y02", "1960")
    mergeByPt("/CDF_2010_S8591881_QCD/d10-x01-y03", "1960")
    mergeByPt("/CDF_2010_S8591881_QCD/d11-x01-y01", "1960")
    mergeByPt("/CDF_2010_S8591881_QCD/d11-x01-y02", "1960")
    mergeByPt("/CDF_2010_S8591881_QCD/d11-x01-y03", "1960")
    ## pT sum density
    mergeByPt("/CDF_2010_S8591881_QCD/d12-x01-y01", "1960")
    mergeByPt("/CDF_2010_S8591881_QCD/d12-x01-y02", "1960")
    mergeByPt("/CDF_2010_S8591881_QCD/d12-x01-y03", "1960")
    mergeByPt("/CDF_2010_S8591881_QCD/d13-x01-y01", "1960")
    mergeByPt("/CDF_2010_S8591881_QCD/d13-x01-y02", "1960")
    mergeByPt("/CDF_2010_S8591881_QCD/d13-x01-y03", "1960")
    ## mean pT
    mergeByPt("/CDF_2010_S8591881_QCD/d14-x01-y01", "1960")
    ## pT max
    mergeByPt("/CDF_2010_S8591881_QCD/d15-x01-y01", "1960")
    ##
    ## And again, with the deprecated name:
    ##
    logging.info("Processing CDF_2008_LEADINGJETS")
    ## charged particle density
    mergeByPt("/CDF_2008_LEADINGJETS/d01-x01-y01", "1960")
    mergeByPt("/CDF_2008_LEADINGJETS/d02-x01-y01", "1960")
    mergeByPt("/CDF_2008_LEADINGJETS/d03-x01-y01", "1960")
    mergeByPt("/CDF_2008_LEADINGJETS/d04-x01-y01", "1960")
    ## pT sum density
    mergeByPt("/CDF_2008_LEADINGJETS/d05-x01-y01", "1960")
    mergeByPt("/CDF_2008_LEADINGJETS/d06-x01-y01", "1960")
    mergeByPt("/CDF_2008_LEADINGJETS/d07-x01-y01", "1960")
    mergeByPt("/CDF_2008_LEADINGJETS/d08-x01-y01", "1960")
    ## mean pT
    mergeByPt("/CDF_2008_LEADINGJETS/d09-x01-y01", "1960")

    ## Rick Field / Deepak Kar Run-II Drell-Yan UE analysis
    logging.info("Processing CDF_2010_S8591881_DY")
    ## charged particle density
    mergeByPt("/CDF_2010_S8591881_DY/d01-x01-y01", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d01-x01-y02", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d01-x01-y03", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d02-x01-y01", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d02-x01-y02", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d02-x01-y03", "1960")
    ## pT sum density
    mergeByPt("/CDF_2010_S8591881_DY/d03-x01-y01", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d03-x01-y02", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d03-x01-y03", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d04-x01-y01", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d04-x01-y02", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d04-x01-y03", "1960")
    ## mean pT
    mergeByPt("/CDF_2010_S8591881_DY/d05-x01-y01", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d05-x01-y02", "1960")
    ## max pT
    mergeByPt("/CDF_2010_S8591881_DY/d06-x01-y01", "1960")
    mergeByPt("/CDF_2010_S8591881_DY/d06-x01-y02", "1960")
    ##
    #useOnePt("/CDF_2010_S8591881_DY/d07-x01-y01", "1960", "10")
    #useOnePt("/CDF_2010_S8591881_DY/d08-x01-y01", "1960", "10")
    #useOnePt("/CDF_2010_S8591881_DY/d09-x01-y01", "1960", "10")
    ##
    ## And again, with the deprecated name:
    ##
    logging.info("Processing CDF_2008_NOTE_9351")
    ## charged particle density
    mergeByPt("/CDF_2008_NOTE_9351/d01-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d02-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d03-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d04-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d05-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d06-x01-y01", "1960")
    ## pT sum density
    mergeByPt("/CDF_2008_NOTE_9351/d07-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d08-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d09-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d10-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d11-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d12-x01-y01", "1960")
    ## mean pT
    mergeByPt("/CDF_2008_NOTE_9351/d13-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d14-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d15-x01-y01", "1960")
    ## max pT
    mergeByPt("/CDF_2008_NOTE_9351/d16-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d17-x01-y01", "1960")
    mergeByPt("/CDF_2008_NOTE_9351/d18-x01-y01", "1960")
    ##
    #useOnePt("/CDF_2008_NOTE_9351/d19-x01-y01", "1960", "10")
    #useOnePt("/CDF_2008_NOTE_9351/d20-x01-y01", "1960", "10")
    #useOnePt("/CDF_2008_NOTE_9351/d21-x01-y01", "1960", "10")

    ## D0 dijet correlation analysis
    logging.info("Processing D0_2004_S5992206")
    useOnePt("/D0_2004_S5992206/d01-x02-y01", "1960", "50")
    useOnePt("/D0_2004_S5992206/d02-x02-y01", "1960", "75")
    useOnePt("/D0_2004_S5992206/d03-x02-y01", "1960", "100")
    useOnePt("/D0_2004_S5992206/d04-x02-y01", "1960", "150")

    ## D0 incl jet cross-section analysis
    logging.info("Processing D0_2008_S7662670")
    mergeByPt("/D0_2008_S7662670/d01-x01-y01", "1960")
    mergeByPt("/D0_2008_S7662670/d02-x01-y01", "1960")
    mergeByPt("/D0_2008_S7662670/d03-x01-y01", "1960")
    mergeByPt("/D0_2008_S7662670/d04-x01-y01", "1960")
    mergeByPt("/D0_2008_S7662670/d05-x01-y01", "1960")
    mergeByPt("/D0_2008_S7662670/d06-x01-y01", "1960")

    ## STAR inclusive jet cross-section
    logging.info("Processing STAR_2006_S6870392")
    useOnePt("/STAR_2006_S6870392/d01-x01-y01", "200", "0")
    mergeByPt("/STAR_2006_S6870392/d02-x01-y01", "200")

    ## STAR underlying event (Helen Caines)
    logging.info("Processing STAR_2009_UE_HELEN")
    mergeByPt("/STAR_2009_UE_HELEN/d01-x01-y01", "200")
    mergeByPt("/STAR_2009_UE_HELEN/d02-x01-y01", "200")
    mergeByPt("/STAR_2009_UE_HELEN/d03-x01-y01", "200")

    ## Choose output file
    out = None
    if opts.OUTFILE == "-":
        out = sys.stdout
    else:
        if opts.APPEND_OUTPUT:
            out = open(opts.OUTFILE, "a")
        else:
            out = open(opts.OUTFILE, "w")


    ## Write out merged histos
    for hpath, h in sorted(outhistos.iteritems()):
        logging.debug("hpath = %s" % hpath)
        out.write(h.asFlat() + "\n\n")


    sys.exit(0)
    ## Write to multiple auto-named dat files
    for hpath, h in sorted(outhistos.iteritems()):
        logging.debug("hpath = %s" % hpath)
        safename = hpath.replace("/", "_") + ".dat"
        if safename[0] == "_":
            safename = safename[1:]
        logging.info("Writing histo to %s" % safename)
        f = open(safename, "w")
        f.write(h.asFlat() + "\n")
        f.close()
