# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _rivet
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _rivet.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _rivet.PySwigIterator_value(*args)
    def incr(*args): return _rivet.PySwigIterator_incr(*args)
    def decr(*args): return _rivet.PySwigIterator_decr(*args)
    def distance(*args): return _rivet.PySwigIterator_distance(*args)
    def equal(*args): return _rivet.PySwigIterator_equal(*args)
    def copy(*args): return _rivet.PySwigIterator_copy(*args)
    def next(*args): return _rivet.PySwigIterator_next(*args)
    def previous(*args): return _rivet.PySwigIterator_previous(*args)
    def advance(*args): return _rivet.PySwigIterator_advance(*args)
    def __eq__(*args): return _rivet.PySwigIterator___eq__(*args)
    def __ne__(*args): return _rivet.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _rivet.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _rivet.PySwigIterator___isub__(*args)
    def __add__(*args): return _rivet.PySwigIterator___add__(*args)
    def __sub__(*args): return _rivet.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _rivet.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class FourVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FourVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FourVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_FourVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def swap(*args): return _rivet.FourVector_swap(*args)
    def px(*args): return _rivet.FourVector_px(*args)
    def py(*args): return _rivet.FourVector_py(*args)
    def pz(*args): return _rivet.FourVector_pz(*args)
    def e(*args): return _rivet.FourVector_e(*args)
    def x(*args): return _rivet.FourVector_x(*args)
    def y(*args): return _rivet.FourVector_y(*args)
    def z(*args): return _rivet.FourVector_z(*args)
    def t(*args): return _rivet.FourVector_t(*args)
    def m2(*args): return _rivet.FourVector_m2(*args)
    def m(*args): return _rivet.FourVector_m(*args)
    def perp2(*args): return _rivet.FourVector_perp2(*args)
    def perp(*args): return _rivet.FourVector_perp(*args)
    def theta(*args): return _rivet.FourVector_theta(*args)
    def phi(*args): return _rivet.FourVector_phi(*args)
    def rho(*args): return _rivet.FourVector_rho(*args)
    def __eq__(*args): return _rivet.FourVector___eq__(*args)
    def __ne__(*args): return _rivet.FourVector___ne__(*args)
    def pseudoRapidity(*args): return _rivet.FourVector_pseudoRapidity(*args)
    def eta(*args): return _rivet.FourVector_eta(*args)
    def set(*args): return _rivet.FourVector_set(*args)
    def setX(*args): return _rivet.FourVector_setX(*args)
    def setY(*args): return _rivet.FourVector_setY(*args)
    def setZ(*args): return _rivet.FourVector_setZ(*args)
    def setT(*args): return _rivet.FourVector_setT(*args)
    def setPx(*args): return _rivet.FourVector_setPx(*args)
    def setPy(*args): return _rivet.FourVector_setPy(*args)
    def setPz(*args): return _rivet.FourVector_setPz(*args)
    def setE(*args): return _rivet.FourVector_setE(*args)
    def __str__(*args): return _rivet.FourVector___str__(*args)
    __swig_destroy__ = _rivet.delete_FourVector
    __del__ = lambda self : None;
FourVector_swigregister = _rivet.FourVector_swigregister
FourVector_swigregister(FourVector)

class ThreeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreeVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_ThreeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def swap(*args): return _rivet.ThreeVector_swap(*args)
    def x(*args): return _rivet.ThreeVector_x(*args)
    def y(*args): return _rivet.ThreeVector_y(*args)
    def z(*args): return _rivet.ThreeVector_z(*args)
    def setX(*args): return _rivet.ThreeVector_setX(*args)
    def setY(*args): return _rivet.ThreeVector_setY(*args)
    def setZ(*args): return _rivet.ThreeVector_setZ(*args)
    def set(*args): return _rivet.ThreeVector_set(*args)
    def phi(*args): return _rivet.ThreeVector_phi(*args)
    def theta(*args): return _rivet.ThreeVector_theta(*args)
    def r(*args): return _rivet.ThreeVector_r(*args)
    def setPhi(*args): return _rivet.ThreeVector_setPhi(*args)
    def setTheta(*args): return _rivet.ThreeVector_setTheta(*args)
    def perp2(*args): return _rivet.ThreeVector_perp2(*args)
    def perp(*args): return _rivet.ThreeVector_perp(*args)
    def __eq__(*args): return _rivet.ThreeVector___eq__(*args)
    def __ne__(*args): return _rivet.ThreeVector___ne__(*args)
    __swig_destroy__ = _rivet.delete_ThreeVector
    __del__ = lambda self : None;
ThreeVector_swigregister = _rivet.ThreeVector_swigregister
ThreeVector_swigregister(ThreeVector)

class GenEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_GenEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rivet.delete_GenEvent
    __del__ = lambda self : None;
    def swap(*args): return _rivet.GenEvent_swap(*args)
    def as_str(*args): return _rivet.GenEvent_as_str(*args)
    def print_version(*args): return _rivet.GenEvent_print_version(*args)
    def barcode_to_particle(*args): return _rivet.GenEvent_barcode_to_particle(*args)
    def barcode_to_vertex(*args): return _rivet.GenEvent_barcode_to_vertex(*args)
    def signal_process_id(*args): return _rivet.GenEvent_signal_process_id(*args)
    def event_number(*args): return _rivet.GenEvent_event_number(*args)
    def mpi(*args): return _rivet.GenEvent_mpi(*args)
    def event_scale(*args): return _rivet.GenEvent_event_scale(*args)
    def alphaQCD(*args): return _rivet.GenEvent_alphaQCD(*args)
    def alphaQED(*args): return _rivet.GenEvent_alphaQED(*args)
    def signal_process_vertex(*args): return _rivet.GenEvent_signal_process_vertex(*args)
    def valid_beam_particles(*args): return _rivet.GenEvent_valid_beam_particles(*args)
    def beam_particles(*args): return _rivet.GenEvent_beam_particles(*args)
    def is_valid(*args): return _rivet.GenEvent_is_valid(*args)
    def weights(*args): return _rivet.GenEvent_weights(*args)
    def cross_section(*args): return _rivet.GenEvent_cross_section(*args)
    def heavy_ion(*args): return _rivet.GenEvent_heavy_ion(*args)
    def pdf_info(*args): return _rivet.GenEvent_pdf_info(*args)
    def random_states(*args): return _rivet.GenEvent_random_states(*args)
    def particles_size(*args): return _rivet.GenEvent_particles_size(*args)
    def particles_empty(*args): return _rivet.GenEvent_particles_empty(*args)
    def vertices_size(*args): return _rivet.GenEvent_vertices_size(*args)
    def vertices_empty(*args): return _rivet.GenEvent_vertices_empty(*args)
    def write_units(*args): return _rivet.GenEvent_write_units(*args)
    def momentum_unit(*args): return _rivet.GenEvent_momentum_unit(*args)
    def length_unit(*args): return _rivet.GenEvent_length_unit(*args)
    def write(*args): return _rivet.GenEvent_write(*args)
    def read(*args): return _rivet.GenEvent_read(*args)
    def add_vertex(*args): return _rivet.GenEvent_add_vertex(*args)
    def remove_vertex(*args): return _rivet.GenEvent_remove_vertex(*args)
    def clear(*args): return _rivet.GenEvent_clear(*args)
    def set_signal_process_id(*args): return _rivet.GenEvent_set_signal_process_id(*args)
    def set_event_number(*args): return _rivet.GenEvent_set_event_number(*args)
    def set_mpi(*args): return _rivet.GenEvent_set_mpi(*args)
    def set_event_scale(*args): return _rivet.GenEvent_set_event_scale(*args)
    def set_alphaQCD(*args): return _rivet.GenEvent_set_alphaQCD(*args)
    def set_alphaQED(*args): return _rivet.GenEvent_set_alphaQED(*args)
    def set_signal_process_vertex(*args): return _rivet.GenEvent_set_signal_process_vertex(*args)
    def set_beam_particles(*args): return _rivet.GenEvent_set_beam_particles(*args)
    def set_random_states(*args): return _rivet.GenEvent_set_random_states(*args)
    def set_cross_section(*args): return _rivet.GenEvent_set_cross_section(*args)
    def set_heavy_ion(*args): return _rivet.GenEvent_set_heavy_ion(*args)
    def set_pdf_info(*args): return _rivet.GenEvent_set_pdf_info(*args)
    def use_units(*args): return _rivet.GenEvent_use_units(*args)
    def __str__(*args): return _rivet.GenEvent___str__(*args)
    def summary(*args): return _rivet.GenEvent_summary(*args)
    def particles(*args): return _rivet.GenEvent_particles(*args)
    def vertices(*args): return _rivet.GenEvent_vertices(*args)
    def fsParticles(*args): return _rivet.GenEvent_fsParticles(*args)
GenEvent_swigregister = _rivet.GenEvent_swigregister
GenEvent_swigregister(GenEvent)

__rshift__ = _rivet.__rshift__
set_input_units = _rivet.set_input_units
write_HepMC_IO_block_begin = _rivet.write_HepMC_IO_block_begin
write_HepMC_IO_block_end = _rivet.write_HepMC_IO_block_end
convert_units = _rivet.convert_units
class GenParticle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenParticle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenParticle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_GenParticle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rivet.delete_GenParticle
    __del__ = lambda self : None;
    def swap(*args): return _rivet.GenParticle_swap(*args)
    def __eq__(*args): return _rivet.GenParticle___eq__(*args)
    def __ne__(*args): return _rivet.GenParticle___ne__(*args)
    def to_vec4(*args): return _rivet.GenParticle_to_vec4(*args)
    def momentum(*args): return _rivet.GenParticle_momentum(*args)
    def pdg_id(*args): return _rivet.GenParticle_pdg_id(*args)
    def status(*args): return _rivet.GenParticle_status(*args)
    def flow(*args): return _rivet.GenParticle_flow(*args)
    def polarization(*args): return _rivet.GenParticle_polarization(*args)
    def production_vertex(*args): return _rivet.GenParticle_production_vertex(*args)
    def end_vertex(*args): return _rivet.GenParticle_end_vertex(*args)
    def parent_event(*args): return _rivet.GenParticle_parent_event(*args)
    def generated_mass(*args): return _rivet.GenParticle_generated_mass(*args)
    def generatedMass(*args): return _rivet.GenParticle_generatedMass(*args)
    def barcode(*args): return _rivet.GenParticle_barcode(*args)
    def is_undecayed(*args): return _rivet.GenParticle_is_undecayed(*args)
    def has_decayed(*args): return _rivet.GenParticle_has_decayed(*args)
    def is_beam(*args): return _rivet.GenParticle_is_beam(*args)
    def suggest_barcode(*args): return _rivet.GenParticle_suggest_barcode(*args)
    def set_momentum(*args): return _rivet.GenParticle_set_momentum(*args)
    def set_pdg_id(*args): return _rivet.GenParticle_set_pdg_id(*args)
    def set_status(*args): return _rivet.GenParticle_set_status(*args)
    def set_flow(*args): return _rivet.GenParticle_set_flow(*args)
    def set_polarization(*args): return _rivet.GenParticle_set_polarization(*args)
    def set_generated_mass(*args): return _rivet.GenParticle_set_generated_mass(*args)
    def setGeneratedMass(*args): return _rivet.GenParticle_setGeneratedMass(*args)
    def __str__(*args): return _rivet.GenParticle___str__(*args)
GenParticle_swigregister = _rivet.GenParticle_swigregister
GenParticle_swigregister(GenParticle)

parents = _rivet.parents
children = _rivet.children
family = _rivet.family
ancestors = _rivet.ancestors
descendants = _rivet.descendants
relatives = _rivet.relatives
class GenVertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenVertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenVertex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_GenVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rivet.delete_GenVertex
    __del__ = lambda self : None;
    def swap(*args): return _rivet.GenVertex_swap(*args)
    def __eq__(*args): return _rivet.GenVertex___eq__(*args)
    def __ne__(*args): return _rivet.GenVertex___ne__(*args)
    def check_momentum_conservation(*args): return _rivet.GenVertex_check_momentum_conservation(*args)
    def add_particle_in(*args): return _rivet.GenVertex_add_particle_in(*args)
    def add_particle_out(*args): return _rivet.GenVertex_add_particle_out(*args)
    def remove_particle(*args): return _rivet.GenVertex_remove_particle(*args)
    def to_vec4(*args): return _rivet.GenVertex_to_vec4(*args)
    def to_vec3(*args): return _rivet.GenVertex_to_vec3(*args)
    def parent_event(*args): return _rivet.GenVertex_parent_event(*args)
    def point3d(*args): return _rivet.GenVertex_point3d(*args)
    def position(*args): return _rivet.GenVertex_position(*args)
    def set_position(*args): return _rivet.GenVertex_set_position(*args)
    def id(*args): return _rivet.GenVertex_id(*args)
    def set_id(*args): return _rivet.GenVertex_set_id(*args)
    def barcode(*args): return _rivet.GenVertex_barcode(*args)
    def suggest_barcode(*args): return _rivet.GenVertex_suggest_barcode(*args)
    def weights(*args): return _rivet.GenVertex_weights(*args)
    def particles_in_size(*args): return _rivet.GenVertex_particles_in_size(*args)
    def particles_out_size(*args): return _rivet.GenVertex_particles_out_size(*args)
    def __str__(*args): return _rivet.GenVertex___str__(*args)
    def particles_in(*args): return _rivet.GenVertex_particles_in(*args)
    def particles_out(*args): return _rivet.GenVertex_particles_out(*args)
    def particles(*args): return _rivet.GenVertex_particles(*args)
    def vertices(*args): return _rivet.GenVertex_vertices(*args)
GenVertex_swigregister = _rivet.GenVertex_swigregister
GenVertex_swigregister(GenVertex)

class IO_BaseClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO_BaseClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IO_BaseClass, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _rivet.delete_IO_BaseClass
    __del__ = lambda self : None;
    def write_event(*args): return _rivet.IO_BaseClass_write_event(*args)
    def fill_next_event(*args): return _rivet.IO_BaseClass_fill_next_event(*args)
    def write_particle_data_table(*args): return _rivet.IO_BaseClass_write_particle_data_table(*args)
    def fill_particle_data_table(*args): return _rivet.IO_BaseClass_fill_particle_data_table(*args)
    def read_next_event(*args): return _rivet.IO_BaseClass_read_next_event(*args)
    def read_particle_data_table(*args): return _rivet.IO_BaseClass_read_particle_data_table(*args)
    def __rshift__(*args): return _rivet.IO_BaseClass___rshift__(*args)
IO_BaseClass_swigregister = _rivet.IO_BaseClass_swigregister
IO_BaseClass_swigregister(IO_BaseClass)

class IO_GenEvent(IO_BaseClass):
    __swig_setmethods__ = {}
    for _s in [IO_BaseClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IO_GenEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [IO_BaseClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IO_GenEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _rivet.delete_IO_GenEvent
    __del__ = lambda self : None;
    def write_event(*args): return _rivet.IO_GenEvent_write_event(*args)
    def fill_next_event(*args): return _rivet.IO_GenEvent_fill_next_event(*args)
    def write_particle_data_table(*args): return _rivet.IO_GenEvent_write_particle_data_table(*args)
    def fill_particle_data_table(*args): return _rivet.IO_GenEvent_fill_particle_data_table(*args)
    def write_comment(*args): return _rivet.IO_GenEvent_write_comment(*args)
    def rdstate(*args): return _rivet.IO_GenEvent_rdstate(*args)
    def clear(*args): return _rivet.IO_GenEvent_clear(*args)
    def use_input_units(*args): return _rivet.IO_GenEvent_use_input_units(*args)
    def precision(*args): return _rivet.IO_GenEvent_precision(*args)
    def error_type(*args): return _rivet.IO_GenEvent_error_type(*args)
    def error_message(*args): return _rivet.IO_GenEvent_error_message(*args)
    def __init__(self, *args): 
        this = _rivet.new_IO_GenEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_next_event(*args): return _rivet.IO_GenEvent_get_next_event(*args)
IO_GenEvent_swigregister = _rivet.IO_GenEvent_swigregister
IO_GenEvent_swigregister(IO_GenEvent)

class GenParticleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenParticleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenParticleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _rivet.GenParticleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _rivet.GenParticleVector___nonzero__(*args)
    def __len__(*args): return _rivet.GenParticleVector___len__(*args)
    def pop(*args): return _rivet.GenParticleVector_pop(*args)
    def __getslice__(*args): return _rivet.GenParticleVector___getslice__(*args)
    def __setslice__(*args): return _rivet.GenParticleVector___setslice__(*args)
    def __delslice__(*args): return _rivet.GenParticleVector___delslice__(*args)
    def __delitem__(*args): return _rivet.GenParticleVector___delitem__(*args)
    def __getitem__(*args): return _rivet.GenParticleVector___getitem__(*args)
    def __setitem__(*args): return _rivet.GenParticleVector___setitem__(*args)
    def append(*args): return _rivet.GenParticleVector_append(*args)
    def empty(*args): return _rivet.GenParticleVector_empty(*args)
    def size(*args): return _rivet.GenParticleVector_size(*args)
    def clear(*args): return _rivet.GenParticleVector_clear(*args)
    def swap(*args): return _rivet.GenParticleVector_swap(*args)
    def get_allocator(*args): return _rivet.GenParticleVector_get_allocator(*args)
    def begin(*args): return _rivet.GenParticleVector_begin(*args)
    def end(*args): return _rivet.GenParticleVector_end(*args)
    def rbegin(*args): return _rivet.GenParticleVector_rbegin(*args)
    def rend(*args): return _rivet.GenParticleVector_rend(*args)
    def pop_back(*args): return _rivet.GenParticleVector_pop_back(*args)
    def erase(*args): return _rivet.GenParticleVector_erase(*args)
    def __init__(self, *args): 
        this = _rivet.new_GenParticleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _rivet.GenParticleVector_push_back(*args)
    def front(*args): return _rivet.GenParticleVector_front(*args)
    def back(*args): return _rivet.GenParticleVector_back(*args)
    def assign(*args): return _rivet.GenParticleVector_assign(*args)
    def resize(*args): return _rivet.GenParticleVector_resize(*args)
    def insert(*args): return _rivet.GenParticleVector_insert(*args)
    def reserve(*args): return _rivet.GenParticleVector_reserve(*args)
    def capacity(*args): return _rivet.GenParticleVector_capacity(*args)
    __swig_destroy__ = _rivet.delete_GenParticleVector
    __del__ = lambda self : None;
GenParticleVector_swigregister = _rivet.GenParticleVector_swigregister
GenParticleVector_swigregister(GenParticleVector)

class cGenParticleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cGenParticleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cGenParticleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _rivet.cGenParticleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _rivet.cGenParticleVector___nonzero__(*args)
    def __len__(*args): return _rivet.cGenParticleVector___len__(*args)
    def pop(*args): return _rivet.cGenParticleVector_pop(*args)
    def __getslice__(*args): return _rivet.cGenParticleVector___getslice__(*args)
    def __setslice__(*args): return _rivet.cGenParticleVector___setslice__(*args)
    def __delslice__(*args): return _rivet.cGenParticleVector___delslice__(*args)
    def __delitem__(*args): return _rivet.cGenParticleVector___delitem__(*args)
    def __getitem__(*args): return _rivet.cGenParticleVector___getitem__(*args)
    def __setitem__(*args): return _rivet.cGenParticleVector___setitem__(*args)
    def append(*args): return _rivet.cGenParticleVector_append(*args)
    def empty(*args): return _rivet.cGenParticleVector_empty(*args)
    def size(*args): return _rivet.cGenParticleVector_size(*args)
    def clear(*args): return _rivet.cGenParticleVector_clear(*args)
    def swap(*args): return _rivet.cGenParticleVector_swap(*args)
    def get_allocator(*args): return _rivet.cGenParticleVector_get_allocator(*args)
    def begin(*args): return _rivet.cGenParticleVector_begin(*args)
    def end(*args): return _rivet.cGenParticleVector_end(*args)
    def rbegin(*args): return _rivet.cGenParticleVector_rbegin(*args)
    def rend(*args): return _rivet.cGenParticleVector_rend(*args)
    def pop_back(*args): return _rivet.cGenParticleVector_pop_back(*args)
    def erase(*args): return _rivet.cGenParticleVector_erase(*args)
    def __init__(self, *args): 
        this = _rivet.new_cGenParticleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _rivet.cGenParticleVector_push_back(*args)
    def front(*args): return _rivet.cGenParticleVector_front(*args)
    def back(*args): return _rivet.cGenParticleVector_back(*args)
    def assign(*args): return _rivet.cGenParticleVector_assign(*args)
    def resize(*args): return _rivet.cGenParticleVector_resize(*args)
    def insert(*args): return _rivet.cGenParticleVector_insert(*args)
    def reserve(*args): return _rivet.cGenParticleVector_reserve(*args)
    def capacity(*args): return _rivet.cGenParticleVector_capacity(*args)
    __swig_destroy__ = _rivet.delete_cGenParticleVector
    __del__ = lambda self : None;
cGenParticleVector_swigregister = _rivet.cGenParticleVector_swigregister
cGenParticleVector_swigregister(cGenParticleVector)

class GenVertexVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenVertexVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenVertexVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _rivet.GenVertexVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _rivet.GenVertexVector___nonzero__(*args)
    def __len__(*args): return _rivet.GenVertexVector___len__(*args)
    def pop(*args): return _rivet.GenVertexVector_pop(*args)
    def __getslice__(*args): return _rivet.GenVertexVector___getslice__(*args)
    def __setslice__(*args): return _rivet.GenVertexVector___setslice__(*args)
    def __delslice__(*args): return _rivet.GenVertexVector___delslice__(*args)
    def __delitem__(*args): return _rivet.GenVertexVector___delitem__(*args)
    def __getitem__(*args): return _rivet.GenVertexVector___getitem__(*args)
    def __setitem__(*args): return _rivet.GenVertexVector___setitem__(*args)
    def append(*args): return _rivet.GenVertexVector_append(*args)
    def empty(*args): return _rivet.GenVertexVector_empty(*args)
    def size(*args): return _rivet.GenVertexVector_size(*args)
    def clear(*args): return _rivet.GenVertexVector_clear(*args)
    def swap(*args): return _rivet.GenVertexVector_swap(*args)
    def get_allocator(*args): return _rivet.GenVertexVector_get_allocator(*args)
    def begin(*args): return _rivet.GenVertexVector_begin(*args)
    def end(*args): return _rivet.GenVertexVector_end(*args)
    def rbegin(*args): return _rivet.GenVertexVector_rbegin(*args)
    def rend(*args): return _rivet.GenVertexVector_rend(*args)
    def pop_back(*args): return _rivet.GenVertexVector_pop_back(*args)
    def erase(*args): return _rivet.GenVertexVector_erase(*args)
    def __init__(self, *args): 
        this = _rivet.new_GenVertexVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _rivet.GenVertexVector_push_back(*args)
    def front(*args): return _rivet.GenVertexVector_front(*args)
    def back(*args): return _rivet.GenVertexVector_back(*args)
    def assign(*args): return _rivet.GenVertexVector_assign(*args)
    def resize(*args): return _rivet.GenVertexVector_resize(*args)
    def insert(*args): return _rivet.GenVertexVector_insert(*args)
    def reserve(*args): return _rivet.GenVertexVector_reserve(*args)
    def capacity(*args): return _rivet.GenVertexVector_capacity(*args)
    __swig_destroy__ = _rivet.delete_GenVertexVector
    __del__ = lambda self : None;
GenVertexVector_swigregister = _rivet.GenVertexVector_swigregister
GenVertexVector_swigregister(GenVertexVector)

class cGenVertexVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cGenVertexVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cGenVertexVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _rivet.cGenVertexVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _rivet.cGenVertexVector___nonzero__(*args)
    def __len__(*args): return _rivet.cGenVertexVector___len__(*args)
    def pop(*args): return _rivet.cGenVertexVector_pop(*args)
    def __getslice__(*args): return _rivet.cGenVertexVector___getslice__(*args)
    def __setslice__(*args): return _rivet.cGenVertexVector___setslice__(*args)
    def __delslice__(*args): return _rivet.cGenVertexVector___delslice__(*args)
    def __delitem__(*args): return _rivet.cGenVertexVector___delitem__(*args)
    def __getitem__(*args): return _rivet.cGenVertexVector___getitem__(*args)
    def __setitem__(*args): return _rivet.cGenVertexVector___setitem__(*args)
    def append(*args): return _rivet.cGenVertexVector_append(*args)
    def empty(*args): return _rivet.cGenVertexVector_empty(*args)
    def size(*args): return _rivet.cGenVertexVector_size(*args)
    def clear(*args): return _rivet.cGenVertexVector_clear(*args)
    def swap(*args): return _rivet.cGenVertexVector_swap(*args)
    def get_allocator(*args): return _rivet.cGenVertexVector_get_allocator(*args)
    def begin(*args): return _rivet.cGenVertexVector_begin(*args)
    def end(*args): return _rivet.cGenVertexVector_end(*args)
    def rbegin(*args): return _rivet.cGenVertexVector_rbegin(*args)
    def rend(*args): return _rivet.cGenVertexVector_rend(*args)
    def pop_back(*args): return _rivet.cGenVertexVector_pop_back(*args)
    def erase(*args): return _rivet.cGenVertexVector_erase(*args)
    def __init__(self, *args): 
        this = _rivet.new_cGenVertexVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _rivet.cGenVertexVector_push_back(*args)
    def front(*args): return _rivet.cGenVertexVector_front(*args)
    def back(*args): return _rivet.cGenVertexVector_back(*args)
    def assign(*args): return _rivet.cGenVertexVector_assign(*args)
    def resize(*args): return _rivet.cGenVertexVector_resize(*args)
    def insert(*args): return _rivet.cGenVertexVector_insert(*args)
    def reserve(*args): return _rivet.cGenVertexVector_reserve(*args)
    def capacity(*args): return _rivet.cGenVertexVector_capacity(*args)
    __swig_destroy__ = _rivet.delete_cGenVertexVector
    __del__ = lambda self : None;
cGenVertexVector_swigregister = _rivet.cGenVertexVector_swigregister
cGenVertexVector_swigregister(cGenVertexVector)

class GenParticlePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenParticlePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenParticlePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_GenParticlePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _rivet.GenParticlePair_first_set
    __swig_getmethods__["first"] = _rivet.GenParticlePair_first_get
    if _newclass:first = _swig_property(_rivet.GenParticlePair_first_get, _rivet.GenParticlePair_first_set)
    __swig_setmethods__["second"] = _rivet.GenParticlePair_second_set
    __swig_getmethods__["second"] = _rivet.GenParticlePair_second_get
    if _newclass:second = _swig_property(_rivet.GenParticlePair_second_get, _rivet.GenParticlePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _rivet.delete_GenParticlePair
    __del__ = lambda self : None;
GenParticlePair_swigregister = _rivet.GenParticlePair_swigregister
GenParticlePair_swigregister(GenParticlePair)

class cGenParticlePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cGenParticlePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cGenParticlePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_cGenParticlePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _rivet.cGenParticlePair_first_set
    __swig_getmethods__["first"] = _rivet.cGenParticlePair_first_get
    if _newclass:first = _swig_property(_rivet.cGenParticlePair_first_get, _rivet.cGenParticlePair_first_set)
    __swig_setmethods__["second"] = _rivet.cGenParticlePair_second_set
    __swig_getmethods__["second"] = _rivet.cGenParticlePair_second_get
    if _newclass:second = _swig_property(_rivet.cGenParticlePair_second_get, _rivet.cGenParticlePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _rivet.delete_cGenParticlePair
    __del__ = lambda self : None;
cGenParticlePair_swigregister = _rivet.cGenParticlePair_swigregister
cGenParticlePair_swigregister(cGenParticlePair)

class StrList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrList, name)
    __repr__ = _swig_repr
    def iterator(*args): return _rivet.StrList_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _rivet.StrList___nonzero__(*args)
    def __len__(*args): return _rivet.StrList___len__(*args)
    def pop(*args): return _rivet.StrList_pop(*args)
    def __getslice__(*args): return _rivet.StrList___getslice__(*args)
    def __setslice__(*args): return _rivet.StrList___setslice__(*args)
    def __delslice__(*args): return _rivet.StrList___delslice__(*args)
    def __delitem__(*args): return _rivet.StrList___delitem__(*args)
    def __getitem__(*args): return _rivet.StrList___getitem__(*args)
    def __setitem__(*args): return _rivet.StrList___setitem__(*args)
    def append(*args): return _rivet.StrList_append(*args)
    def empty(*args): return _rivet.StrList_empty(*args)
    def size(*args): return _rivet.StrList_size(*args)
    def clear(*args): return _rivet.StrList_clear(*args)
    def swap(*args): return _rivet.StrList_swap(*args)
    def get_allocator(*args): return _rivet.StrList_get_allocator(*args)
    def begin(*args): return _rivet.StrList_begin(*args)
    def end(*args): return _rivet.StrList_end(*args)
    def rbegin(*args): return _rivet.StrList_rbegin(*args)
    def rend(*args): return _rivet.StrList_rend(*args)
    def pop_back(*args): return _rivet.StrList_pop_back(*args)
    def erase(*args): return _rivet.StrList_erase(*args)
    def __init__(self, *args): 
        this = _rivet.new_StrList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _rivet.StrList_push_back(*args)
    def front(*args): return _rivet.StrList_front(*args)
    def back(*args): return _rivet.StrList_back(*args)
    def assign(*args): return _rivet.StrList_assign(*args)
    def resize(*args): return _rivet.StrList_resize(*args)
    def insert(*args): return _rivet.StrList_insert(*args)
    def reserve(*args): return _rivet.StrList_reserve(*args)
    def capacity(*args): return _rivet.StrList_capacity(*args)
    __swig_destroy__ = _rivet.delete_StrList
    __del__ = lambda self : None;
StrList_swigregister = _rivet.StrList_swigregister
StrList_swigregister(StrList)

AIDAML = _rivet.AIDAML
FLAT = _rivet.FLAT
ROOT = _rivet.ROOT
getKnownHistoFormats = _rivet.getKnownHistoFormats
getKnownHistoFormatsR = _rivet.getKnownHistoFormatsR
getKnownHistoFormatEnums = _rivet.getKnownHistoFormatEnums
getKnownHistoFormatNames = _rivet.getKnownHistoFormatNames
ELECTRON = _rivet.ELECTRON
POSITRON = _rivet.POSITRON
PROTON = _rivet.PROTON
ANTIPROTON = _rivet.ANTIPROTON
PHOTON = _rivet.PHOTON
NEUTRON = _rivet.NEUTRON
ANTINEUTRON = _rivet.ANTINEUTRON
MUON = _rivet.MUON
ANTIMUON = _rivet.ANTIMUON
NU_E = _rivet.NU_E
NU_EBAR = _rivet.NU_EBAR
NU_MU = _rivet.NU_MU
NU_MUBAR = _rivet.NU_MUBAR
NU_TAU = _rivet.NU_TAU
NU_TAUBAR = _rivet.NU_TAUBAR
PIPLUS = _rivet.PIPLUS
PIMINUS = _rivet.PIMINUS
TAU = _rivet.TAU
ANTITAU = _rivet.ANTITAU
EMINUS = _rivet.EMINUS
EPLUS = _rivet.EPLUS
P = _rivet.P
PBAR = _rivet.PBAR
GLUON = _rivet.GLUON
GAMMA = _rivet.GAMMA
WPLUSBOSON = _rivet.WPLUSBOSON
WMINUSBOSON = _rivet.WMINUSBOSON
ZBOSON = _rivet.ZBOSON
HIGGS = _rivet.HIGGS
DQUARK = _rivet.DQUARK
UQUARK = _rivet.UQUARK
SQUARK = _rivet.SQUARK
CQUARK = _rivet.CQUARK
BQUARK = _rivet.BQUARK
TQUARK = _rivet.TQUARK
ANY = _rivet.ANY
PHOTOELECTRON = _rivet.PHOTOELECTRON
PHOTOPOSITRON = _rivet.PHOTOPOSITRON
PHOTOMUON = _rivet.PHOTOMUON
PHOTOANTIMUON = _rivet.PHOTOANTIMUON
PHOTOTAU = _rivet.PHOTOTAU
PHOTOANTITAU = _rivet.PHOTOANTITAU
getParticleNamesMap = _rivet.getParticleNamesMap
getParticleNamesRMap = _rivet.getParticleNamesRMap
getParticleNameEnums = _rivet.getParticleNameEnums
getParticleNameEnum = _rivet.getParticleNameEnum
getParticleNames = _rivet.getParticleNames
toParticleName = _rivet.toParticleName
class BeamPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BeamPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BeamPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_BeamPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _rivet.BeamPair_first_set
    __swig_getmethods__["first"] = _rivet.BeamPair_first_get
    if _newclass:first = _swig_property(_rivet.BeamPair_first_get, _rivet.BeamPair_first_set)
    __swig_setmethods__["second"] = _rivet.BeamPair_second_set
    __swig_getmethods__["second"] = _rivet.BeamPair_second_get
    if _newclass:second = _swig_property(_rivet.BeamPair_second_get, _rivet.BeamPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _rivet.delete_BeamPair
    __del__ = lambda self : None;
BeamPair_swigregister = _rivet.BeamPair_swigregister
BeamPair_swigregister(BeamPair)
make_pdgid_pair = _rivet.make_pdgid_pair
toString = _rivet.toString

class LogLevelMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogLevelMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogLevelMap, name)
    __repr__ = _swig_repr
    def iterator(*args): return _rivet.LogLevelMap_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _rivet.LogLevelMap___nonzero__(*args)
    def __len__(*args): return _rivet.LogLevelMap___len__(*args)
    def __getitem__(*args): return _rivet.LogLevelMap___getitem__(*args)
    def __delitem__(*args): return _rivet.LogLevelMap___delitem__(*args)
    def has_key(*args): return _rivet.LogLevelMap_has_key(*args)
    def keys(*args): return _rivet.LogLevelMap_keys(*args)
    def values(*args): return _rivet.LogLevelMap_values(*args)
    def items(*args): return _rivet.LogLevelMap_items(*args)
    def __contains__(*args): return _rivet.LogLevelMap___contains__(*args)
    def key_iterator(*args): return _rivet.LogLevelMap_key_iterator(*args)
    def value_iterator(*args): return _rivet.LogLevelMap_value_iterator(*args)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(*args): return _rivet.LogLevelMap___setitem__(*args)
    def __init__(self, *args): 
        this = _rivet.new_LogLevelMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return _rivet.LogLevelMap_empty(*args)
    def size(*args): return _rivet.LogLevelMap_size(*args)
    def clear(*args): return _rivet.LogLevelMap_clear(*args)
    def swap(*args): return _rivet.LogLevelMap_swap(*args)
    def get_allocator(*args): return _rivet.LogLevelMap_get_allocator(*args)
    def begin(*args): return _rivet.LogLevelMap_begin(*args)
    def end(*args): return _rivet.LogLevelMap_end(*args)
    def rbegin(*args): return _rivet.LogLevelMap_rbegin(*args)
    def rend(*args): return _rivet.LogLevelMap_rend(*args)
    def count(*args): return _rivet.LogLevelMap_count(*args)
    def erase(*args): return _rivet.LogLevelMap_erase(*args)
    def find(*args): return _rivet.LogLevelMap_find(*args)
    def lower_bound(*args): return _rivet.LogLevelMap_lower_bound(*args)
    def upper_bound(*args): return _rivet.LogLevelMap_upper_bound(*args)
    __swig_destroy__ = _rivet.delete_LogLevelMap
    __del__ = lambda self : None;
LogLevelMap_swigregister = _rivet.LogLevelMap_swigregister
LogLevelMap_swigregister(LogLevelMap)

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    TRACE = _rivet.Log_TRACE
    DEBUG = _rivet.Log_DEBUG
    INFO = _rivet.Log_INFO
    WARN = _rivet.Log_WARN
    ERROR = _rivet.Log_ERROR
    __swig_getmethods__["setLogLevel"] = lambda x: _rivet.Log_setLogLevel
    if _newclass:setLogLevel = staticmethod(_rivet.Log_setLogLevel)
    __swig_getmethods__["setLevels"] = lambda x: _rivet.Log_setLevels
    if _newclass:setLevels = staticmethod(_rivet.Log_setLevels)
    __swig_getmethods__["setShowTimestamp"] = lambda x: _rivet.Log_setShowTimestamp
    if _newclass:setShowTimestamp = staticmethod(_rivet.Log_setShowTimestamp)
    __swig_getmethods__["setShowLevel"] = lambda x: _rivet.Log_setShowLevel
    if _newclass:setShowLevel = staticmethod(_rivet.Log_setShowLevel)
    __swig_getmethods__["setShowLoggerName"] = lambda x: _rivet.Log_setShowLoggerName
    if _newclass:setShowLoggerName = staticmethod(_rivet.Log_setShowLoggerName)
    __swig_getmethods__["setUseColors"] = lambda x: _rivet.Log_setUseColors
    if _newclass:setUseColors = staticmethod(_rivet.Log_setUseColors)
    __swig_getmethods__["getLog"] = lambda x: _rivet.Log_getLog
    if _newclass:getLog = staticmethod(_rivet.Log_getLog)
    def getLevel(*args): return _rivet.Log_getLevel(*args)
    def setLevel(*args): return _rivet.Log_setLevel(*args)
    __swig_getmethods__["getLevelFromName"] = lambda x: _rivet.Log_getLevelFromName
    if _newclass:getLevelFromName = staticmethod(_rivet.Log_getLevelFromName)
    __swig_getmethods__["getLevelName"] = lambda x: _rivet.Log_getLevelName
    if _newclass:getLevelName = staticmethod(_rivet.Log_getLevelName)
    def getName(*args): return _rivet.Log_getName(*args)
    def setName(*args): return _rivet.Log_setName(*args)
    def isActive(*args): return _rivet.Log_isActive(*args)
    def trace(*args): return _rivet.Log_trace(*args)
    def debug(*args): return _rivet.Log_debug(*args)
    def info(*args): return _rivet.Log_info(*args)
    def warn(*args): return _rivet.Log_warn(*args)
    def error(*args): return _rivet.Log_error(*args)
    __swig_getmethods__["_nostream"] = _rivet.Log__nostream_get
    if _newclass:_nostream = _swig_property(_rivet.Log__nostream_get)
    __swig_destroy__ = _rivet.delete_Log
    __del__ = lambda self : None;
Log_swigregister = _rivet.Log_swigregister
Log_swigregister(Log)
Log_setLogLevel = _rivet.Log_setLogLevel
Log_setLevels = _rivet.Log_setLevels
Log_setShowTimestamp = _rivet.Log_setShowTimestamp
Log_setShowLevel = _rivet.Log_setShowLevel
Log_setShowLoggerName = _rivet.Log_setShowLoggerName
Log_setUseColors = _rivet.Log_setUseColors
Log_getLog = _rivet.Log_getLog
Log_getLevelFromName = _rivet.Log_getLevelFromName
Log_getLevelName = _rivet.Log_getLevelName

version = _rivet.version
class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _rivet.delete_Event
    __del__ = lambda self : None;
Event_swigregister = _rivet.Event_swigregister
Event_swigregister(Event)
__lshift__ = _rivet.__lshift__

class Particle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _rivet.delete_Particle
    __del__ = lambda self : None;
Particle_swigregister = _rivet.Particle_swigregister
Particle_swigregister(Particle)

beams = _rivet.beams
beamIds = _rivet.beamIds
class Analysis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Analysis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Analysis, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def name(*args): return _rivet.Analysis_name(*args)
    def spiresId(*args): return _rivet.Analysis_spiresId(*args)
    def summary(*args): return _rivet.Analysis_summary(*args)
    def description(*args): return _rivet.Analysis_description(*args)
    def runInfo(*args): return _rivet.Analysis_runInfo(*args)
    def experiment(*args): return _rivet.Analysis_experiment(*args)
    def collider(*args): return _rivet.Analysis_collider(*args)
    def year(*args): return _rivet.Analysis_year(*args)
    def status(*args): return _rivet.Analysis_status(*args)
    def authors(*args): return _rivet.Analysis_authors(*args)
    def references(*args): return _rivet.Analysis_references(*args)
    def beams(*args): return _rivet.Analysis_beams(*args)
    def requiredBeams(*args): return _rivet.Analysis_requiredBeams(*args)
    def isCompatible(*args): return _rivet.Analysis_isCompatible(*args)
    def needsCrossSection(*args): return _rivet.Analysis_needsCrossSection(*args)
    __swig_destroy__ = _rivet.delete_Analysis
    __del__ = lambda self : None;
Analysis_swigregister = _rivet.Analysis_swigregister
Analysis_swigregister(Analysis)

class AnalysisHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_AnalysisHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    def runName(*args): return _rivet.AnalysisHandler_runName(*args)
    def numEvents(*args): return _rivet.AnalysisHandler_numEvents(*args)
    def sumOfWeights(*args): return _rivet.AnalysisHandler_sumOfWeights(*args)
    def analysisNames(*args): return _rivet.AnalysisHandler_analysisNames(*args)
    def addAnalysis(*args): return _rivet.AnalysisHandler_addAnalysis(*args)
    def addAnalyses(*args): return _rivet.AnalysisHandler_addAnalyses(*args)
    def removeAnalysis(*args): return _rivet.AnalysisHandler_removeAnalysis(*args)
    def removeAnalyses(*args): return _rivet.AnalysisHandler_removeAnalyses(*args)
    def removeIncompatibleAnalyses(*args): return _rivet.AnalysisHandler_removeIncompatibleAnalyses(*args)
    def init(*args): return _rivet.AnalysisHandler_init(*args)
    def analyze(*args): return _rivet.AnalysisHandler_analyze(*args)
    def finalize(*args): return _rivet.AnalysisHandler_finalize(*args)
    def needCrossSection(*args): return _rivet.AnalysisHandler_needCrossSection(*args)
    def setCrossSection(*args): return _rivet.AnalysisHandler_setCrossSection(*args)
    def commitData(*args): return _rivet.AnalysisHandler_commitData(*args)
    __swig_destroy__ = _rivet.delete_AnalysisHandler
    __del__ = lambda self : None;
AnalysisHandler_swigregister = _rivet.AnalysisHandler_swigregister
AnalysisHandler_swigregister(AnalysisHandler)

class AnalysisLoader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisLoader, name)
    __repr__ = _swig_repr
    __swig_getmethods__["analysisNames"] = lambda x: _rivet.AnalysisLoader_analysisNames
    if _newclass:analysisNames = staticmethod(_rivet.AnalysisLoader_analysisNames)
    __swig_getmethods__["getAnalysis"] = lambda x: _rivet.AnalysisLoader_getAnalysis
    if _newclass:getAnalysis = staticmethod(_rivet.AnalysisLoader_getAnalysis)
    def __init__(self, *args): 
        this = _rivet.new_AnalysisLoader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rivet.delete_AnalysisLoader
    __del__ = lambda self : None;
AnalysisLoader_swigregister = _rivet.AnalysisLoader_swigregister
AnalysisLoader_swigregister(AnalysisLoader)
AnalysisLoader_analysisNames = _rivet.AnalysisLoader_analysisNames
AnalysisLoader_getAnalysis = _rivet.AnalysisLoader_getAnalysis



