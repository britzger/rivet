# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _rivet
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _rivet.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _rivet.PySwigIterator_value(*args)
    def incr(*args): return _rivet.PySwigIterator_incr(*args)
    def decr(*args): return _rivet.PySwigIterator_decr(*args)
    def distance(*args): return _rivet.PySwigIterator_distance(*args)
    def equal(*args): return _rivet.PySwigIterator_equal(*args)
    def copy(*args): return _rivet.PySwigIterator_copy(*args)
    def next(*args): return _rivet.PySwigIterator_next(*args)
    def previous(*args): return _rivet.PySwigIterator_previous(*args)
    def advance(*args): return _rivet.PySwigIterator_advance(*args)
    def __eq__(*args): return _rivet.PySwigIterator___eq__(*args)
    def __ne__(*args): return _rivet.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _rivet.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _rivet.PySwigIterator___isub__(*args)
    def __add__(*args): return _rivet.PySwigIterator___add__(*args)
    def __sub__(*args): return _rivet.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _rivet.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class StrList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrList, name)
    __repr__ = _swig_repr
    def iterator(*args): return _rivet.StrList_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _rivet.StrList___nonzero__(*args)
    def __len__(*args): return _rivet.StrList___len__(*args)
    def pop(*args): return _rivet.StrList_pop(*args)
    def __getslice__(*args): return _rivet.StrList___getslice__(*args)
    def __setslice__(*args): return _rivet.StrList___setslice__(*args)
    def __delslice__(*args): return _rivet.StrList___delslice__(*args)
    def __delitem__(*args): return _rivet.StrList___delitem__(*args)
    def __getitem__(*args): return _rivet.StrList___getitem__(*args)
    def __setitem__(*args): return _rivet.StrList___setitem__(*args)
    def append(*args): return _rivet.StrList_append(*args)
    def empty(*args): return _rivet.StrList_empty(*args)
    def size(*args): return _rivet.StrList_size(*args)
    def clear(*args): return _rivet.StrList_clear(*args)
    def swap(*args): return _rivet.StrList_swap(*args)
    def get_allocator(*args): return _rivet.StrList_get_allocator(*args)
    def begin(*args): return _rivet.StrList_begin(*args)
    def end(*args): return _rivet.StrList_end(*args)
    def rbegin(*args): return _rivet.StrList_rbegin(*args)
    def rend(*args): return _rivet.StrList_rend(*args)
    def pop_back(*args): return _rivet.StrList_pop_back(*args)
    def erase(*args): return _rivet.StrList_erase(*args)
    def __init__(self, *args): 
        this = _rivet.new_StrList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _rivet.StrList_push_back(*args)
    def front(*args): return _rivet.StrList_front(*args)
    def back(*args): return _rivet.StrList_back(*args)
    def assign(*args): return _rivet.StrList_assign(*args)
    def resize(*args): return _rivet.StrList_resize(*args)
    def insert(*args): return _rivet.StrList_insert(*args)
    def reserve(*args): return _rivet.StrList_reserve(*args)
    def capacity(*args): return _rivet.StrList_capacity(*args)
    __swig_destroy__ = _rivet.delete_StrList
    __del__ = lambda self : None;
StrList_swigregister = _rivet.StrList_swigregister
StrList_swigregister(StrList)

AIDAML = _rivet.AIDAML
FLAT = _rivet.FLAT
ROOT = _rivet.ROOT
getKnownHistoFormats = _rivet.getKnownHistoFormats
getKnownHistoFormatsR = _rivet.getKnownHistoFormatsR
getKnownHistoFormatEnums = _rivet.getKnownHistoFormatEnums
getKnownHistoFormatNames = _rivet.getKnownHistoFormatNames
ELECTRON = _rivet.ELECTRON
POSITRON = _rivet.POSITRON
PROTON = _rivet.PROTON
ANTIPROTON = _rivet.ANTIPROTON
PHOTON = _rivet.PHOTON
NEUTRON = _rivet.NEUTRON
ANTINEUTRON = _rivet.ANTINEUTRON
MUON = _rivet.MUON
ANTIMUON = _rivet.ANTIMUON
NU_E = _rivet.NU_E
NU_EBAR = _rivet.NU_EBAR
NU_MU = _rivet.NU_MU
NU_MUBAR = _rivet.NU_MUBAR
NU_TAU = _rivet.NU_TAU
NU_TAUBAR = _rivet.NU_TAUBAR
PIPLUS = _rivet.PIPLUS
PIMINUS = _rivet.PIMINUS
TAU = _rivet.TAU
ANTITAU = _rivet.ANTITAU
EMINUS = _rivet.EMINUS
EPLUS = _rivet.EPLUS
P = _rivet.P
PBAR = _rivet.PBAR
GLUON = _rivet.GLUON
GAMMA = _rivet.GAMMA
WPLUSBOSON = _rivet.WPLUSBOSON
WMINUSBOSON = _rivet.WMINUSBOSON
ZBOSON = _rivet.ZBOSON
HIGGS = _rivet.HIGGS
DQUARK = _rivet.DQUARK
UQUARK = _rivet.UQUARK
SQUARK = _rivet.SQUARK
CQUARK = _rivet.CQUARK
BQUARK = _rivet.BQUARK
TQUARK = _rivet.TQUARK
ANY = _rivet.ANY
PHOTOELECTRON = _rivet.PHOTOELECTRON
PHOTOPOSITRON = _rivet.PHOTOPOSITRON
PHOTOMUON = _rivet.PHOTOMUON
PHOTOANTIMUON = _rivet.PHOTOANTIMUON
PHOTOTAU = _rivet.PHOTOTAU
PHOTOANTITAU = _rivet.PHOTOANTITAU
getParticleNamesMap = _rivet.getParticleNamesMap
getParticleNamesRMap = _rivet.getParticleNamesRMap
getParticleNameEnums = _rivet.getParticleNameEnums
getParticleNameEnum = _rivet.getParticleNameEnum
getParticleNames = _rivet.getParticleNames
toParticleName = _rivet.toParticleName
class BeamPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BeamPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BeamPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_BeamPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _rivet.BeamPair_first_set
    __swig_getmethods__["first"] = _rivet.BeamPair_first_get
    if _newclass:first = _swig_property(_rivet.BeamPair_first_get, _rivet.BeamPair_first_set)
    __swig_setmethods__["second"] = _rivet.BeamPair_second_set
    __swig_getmethods__["second"] = _rivet.BeamPair_second_get
    if _newclass:second = _swig_property(_rivet.BeamPair_second_get, _rivet.BeamPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _rivet.delete_BeamPair
    __del__ = lambda self : None;
BeamPair_swigregister = _rivet.BeamPair_swigregister
BeamPair_swigregister(BeamPair)
make_pdgid_pair = _rivet.make_pdgid_pair
toString = _rivet.toString

class LogLevelMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogLevelMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogLevelMap, name)
    __repr__ = _swig_repr
    def iterator(*args): return _rivet.LogLevelMap_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _rivet.LogLevelMap___nonzero__(*args)
    def __len__(*args): return _rivet.LogLevelMap___len__(*args)
    def __getitem__(*args): return _rivet.LogLevelMap___getitem__(*args)
    def __delitem__(*args): return _rivet.LogLevelMap___delitem__(*args)
    def has_key(*args): return _rivet.LogLevelMap_has_key(*args)
    def keys(*args): return _rivet.LogLevelMap_keys(*args)
    def values(*args): return _rivet.LogLevelMap_values(*args)
    def items(*args): return _rivet.LogLevelMap_items(*args)
    def __contains__(*args): return _rivet.LogLevelMap___contains__(*args)
    def key_iterator(*args): return _rivet.LogLevelMap_key_iterator(*args)
    def value_iterator(*args): return _rivet.LogLevelMap_value_iterator(*args)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(*args): return _rivet.LogLevelMap___setitem__(*args)
    def __init__(self, *args): 
        this = _rivet.new_LogLevelMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return _rivet.LogLevelMap_empty(*args)
    def size(*args): return _rivet.LogLevelMap_size(*args)
    def clear(*args): return _rivet.LogLevelMap_clear(*args)
    def swap(*args): return _rivet.LogLevelMap_swap(*args)
    def get_allocator(*args): return _rivet.LogLevelMap_get_allocator(*args)
    def begin(*args): return _rivet.LogLevelMap_begin(*args)
    def end(*args): return _rivet.LogLevelMap_end(*args)
    def rbegin(*args): return _rivet.LogLevelMap_rbegin(*args)
    def rend(*args): return _rivet.LogLevelMap_rend(*args)
    def count(*args): return _rivet.LogLevelMap_count(*args)
    def erase(*args): return _rivet.LogLevelMap_erase(*args)
    def find(*args): return _rivet.LogLevelMap_find(*args)
    def lower_bound(*args): return _rivet.LogLevelMap_lower_bound(*args)
    def upper_bound(*args): return _rivet.LogLevelMap_upper_bound(*args)
    __swig_destroy__ = _rivet.delete_LogLevelMap
    __del__ = lambda self : None;
LogLevelMap_swigregister = _rivet.LogLevelMap_swigregister
LogLevelMap_swigregister(LogLevelMap)

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    TRACE = _rivet.Log_TRACE
    DEBUG = _rivet.Log_DEBUG
    INFO = _rivet.Log_INFO
    WARN = _rivet.Log_WARN
    ERROR = _rivet.Log_ERROR
    __swig_getmethods__["setLogLevel"] = lambda x: _rivet.Log_setLogLevel
    if _newclass:setLogLevel = staticmethod(_rivet.Log_setLogLevel)
    __swig_getmethods__["setLevels"] = lambda x: _rivet.Log_setLevels
    if _newclass:setLevels = staticmethod(_rivet.Log_setLevels)
    __swig_getmethods__["setShowTimestamp"] = lambda x: _rivet.Log_setShowTimestamp
    if _newclass:setShowTimestamp = staticmethod(_rivet.Log_setShowTimestamp)
    __swig_getmethods__["setShowLevel"] = lambda x: _rivet.Log_setShowLevel
    if _newclass:setShowLevel = staticmethod(_rivet.Log_setShowLevel)
    __swig_getmethods__["setShowLoggerName"] = lambda x: _rivet.Log_setShowLoggerName
    if _newclass:setShowLoggerName = staticmethod(_rivet.Log_setShowLoggerName)
    __swig_getmethods__["setUseColors"] = lambda x: _rivet.Log_setUseColors
    if _newclass:setUseColors = staticmethod(_rivet.Log_setUseColors)
    __swig_getmethods__["getLog"] = lambda x: _rivet.Log_getLog
    if _newclass:getLog = staticmethod(_rivet.Log_getLog)
    def getLevel(*args): return _rivet.Log_getLevel(*args)
    def setLevel(*args): return _rivet.Log_setLevel(*args)
    __swig_getmethods__["getLevelFromName"] = lambda x: _rivet.Log_getLevelFromName
    if _newclass:getLevelFromName = staticmethod(_rivet.Log_getLevelFromName)
    __swig_getmethods__["getLevelName"] = lambda x: _rivet.Log_getLevelName
    if _newclass:getLevelName = staticmethod(_rivet.Log_getLevelName)
    def getName(*args): return _rivet.Log_getName(*args)
    def setName(*args): return _rivet.Log_setName(*args)
    def isActive(*args): return _rivet.Log_isActive(*args)
    def trace(*args): return _rivet.Log_trace(*args)
    def debug(*args): return _rivet.Log_debug(*args)
    def info(*args): return _rivet.Log_info(*args)
    def warn(*args): return _rivet.Log_warn(*args)
    def error(*args): return _rivet.Log_error(*args)
    __swig_getmethods__["_nostream"] = _rivet.Log__nostream_get
    if _newclass:_nostream = _swig_property(_rivet.Log__nostream_get)
    __swig_destroy__ = _rivet.delete_Log
    __del__ = lambda self : None;
Log_swigregister = _rivet.Log_swigregister
Log_swigregister(Log)
Log_setLogLevel = _rivet.Log_setLogLevel
Log_setLevels = _rivet.Log_setLevels
Log_setShowTimestamp = _rivet.Log_setShowTimestamp
Log_setShowLevel = _rivet.Log_setShowLevel
Log_setShowLoggerName = _rivet.Log_setShowLoggerName
Log_setUseColors = _rivet.Log_setUseColors
Log_getLog = _rivet.Log_getLog
Log_getLevelFromName = _rivet.Log_getLevelFromName
Log_getLevelName = _rivet.Log_getLevelName

version = _rivet.version
class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _rivet.delete_Event
    __del__ = lambda self : None;
Event_swigregister = _rivet.Event_swigregister
Event_swigregister(Event)
__lshift__ = _rivet.__lshift__

class Particle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _rivet.delete_Particle
    __del__ = lambda self : None;
Particle_swigregister = _rivet.Particle_swigregister
Particle_swigregister(Particle)

beams = _rivet.beams
beamIds = _rivet.beamIds
class Analysis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Analysis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Analysis, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def name(*args): return _rivet.Analysis_name(*args)
    def spiresId(*args): return _rivet.Analysis_spiresId(*args)
    def summary(*args): return _rivet.Analysis_summary(*args)
    def description(*args): return _rivet.Analysis_description(*args)
    def runInfo(*args): return _rivet.Analysis_runInfo(*args)
    def experiment(*args): return _rivet.Analysis_experiment(*args)
    def collider(*args): return _rivet.Analysis_collider(*args)
    def year(*args): return _rivet.Analysis_year(*args)
    def status(*args): return _rivet.Analysis_status(*args)
    def authors(*args): return _rivet.Analysis_authors(*args)
    def references(*args): return _rivet.Analysis_references(*args)
    def beams(*args): return _rivet.Analysis_beams(*args)
    def requiredBeams(*args): return _rivet.Analysis_requiredBeams(*args)
    def isCompatible(*args): return _rivet.Analysis_isCompatible(*args)
    def needsCrossSection(*args): return _rivet.Analysis_needsCrossSection(*args)
    __swig_destroy__ = _rivet.delete_Analysis
    __del__ = lambda self : None;
Analysis_swigregister = _rivet.Analysis_swigregister
Analysis_swigregister(Analysis)

class AnalysisHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_AnalysisHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    def runName(*args): return _rivet.AnalysisHandler_runName(*args)
    def numEvents(*args): return _rivet.AnalysisHandler_numEvents(*args)
    def sumOfWeights(*args): return _rivet.AnalysisHandler_sumOfWeights(*args)
    def analysisNames(*args): return _rivet.AnalysisHandler_analysisNames(*args)
    def addAnalysis(*args): return _rivet.AnalysisHandler_addAnalysis(*args)
    def addAnalyses(*args): return _rivet.AnalysisHandler_addAnalyses(*args)
    def removeAnalysis(*args): return _rivet.AnalysisHandler_removeAnalysis(*args)
    def removeAnalyses(*args): return _rivet.AnalysisHandler_removeAnalyses(*args)
    def removeIncompatibleAnalyses(*args): return _rivet.AnalysisHandler_removeIncompatibleAnalyses(*args)
    def init(*args): return _rivet.AnalysisHandler_init(*args)
    def analyze(*args): return _rivet.AnalysisHandler_analyze(*args)
    def finalize(*args): return _rivet.AnalysisHandler_finalize(*args)
    def needCrossSection(*args): return _rivet.AnalysisHandler_needCrossSection(*args)
    def setCrossSection(*args): return _rivet.AnalysisHandler_setCrossSection(*args)
    def commitData(*args): return _rivet.AnalysisHandler_commitData(*args)
    __swig_destroy__ = _rivet.delete_AnalysisHandler
    __del__ = lambda self : None;
AnalysisHandler_swigregister = _rivet.AnalysisHandler_swigregister
AnalysisHandler_swigregister(AnalysisHandler)

class AnalysisLoader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnalysisLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnalysisLoader, name)
    __repr__ = _swig_repr
    __swig_getmethods__["analysisNames"] = lambda x: _rivet.AnalysisLoader_analysisNames
    if _newclass:analysisNames = staticmethod(_rivet.AnalysisLoader_analysisNames)
    __swig_getmethods__["getAnalysis"] = lambda x: _rivet.AnalysisLoader_getAnalysis
    if _newclass:getAnalysis = staticmethod(_rivet.AnalysisLoader_getAnalysis)
    def __init__(self, *args): 
        this = _rivet.new_AnalysisLoader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rivet.delete_AnalysisLoader
    __del__ = lambda self : None;
AnalysisLoader_swigregister = _rivet.AnalysisLoader_swigregister
AnalysisLoader_swigregister(AnalysisLoader)
AnalysisLoader_analysisNames = _rivet.AnalysisLoader_analysisNames
AnalysisLoader_getAnalysis = _rivet.AnalysisLoader_getAnalysis

class Run(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Run, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Run, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rivet.new_Run(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rivet.delete_Run
    __del__ = lambda self : None;
    def setCrossSection(*args): return _rivet.Run_setCrossSection(*args)
    def setMaxEvtNum(*args): return _rivet.Run_setMaxEvtNum(*args)
    def setListAnalyses(*args): return _rivet.Run_setListAnalyses(*args)
    def processFile(*args): return _rivet.Run_processFile(*args)
Run_swigregister = _rivet.Run_swigregister
Run_swigregister(Run)



