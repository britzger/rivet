#! /usr/bin/env python

## Get output filename
import sys
if len(sys.argv) < 2:
    print "You must supply the output file as an argument"
    exit(1)
OUTFILE = sys.argv[1]


## Make "set" a builtin type on Python < 2.4
if not 'set' in dir(__builtins__):
    from sets import Set as set

## Make "sorted" a builtin function on Python < 2.4
if not 'sorted' in dir(__builtins__):
    def sorted(iterable, cmp=None, key=None, reverse=None):
        rtn = iterable
        rtn.sort(cmp)#, key, reverse)
        return rtn


## Get input paths to allow rivet module to be imported from the src dir
import os, re, glob
pybuild = os.path.abspath(os.path.join(os.getcwd(), "..", "pyext", "build"))
dirs = []
for d in os.listdir(pybuild):
    if re.match(r"lib\..*-.*-%d\.%d" % (sys.version_info[0], sys.version_info[1]), d):
        dirs.append(os.path.join(pybuild, d))
sys.path = dirs + sys.path
try:
    os.environ["LD_LIBRARY_PATH"] = os.environ["LD_LIBRARY_PATH"] + ":" + \
        os.path.abspath(os.path.join(os.getcwd(), "..", "src", ".libs"))
except:
    pass
try:
    os.environ["DYLD_LIBRARY_PATH"] = os.environ["DYLD_LIBRARY_PATH"] + ":" + \
        os.path.abspath(os.path.join(os.getcwd(), "..", "src", ".libs"))
except:
    pass
anadirs = glob.glob(os.path.join(os.getcwd(), "..", "src", "Analyses", ".libs"))
#print anadirs
os.environ["RIVET_ANALYSIS_PATH"] = ":".join(anadirs)

        
## Change dlopen status to GLOBAL for Rivet lib
try:
    import ctypes
    sys.setdlopenflags(sys.getdlopenflags() | ctypes.RTLD_GLOBAL)
except:
    import dl
    sys.setdlopenflags(sys.getdlopenflags() | dl.RTLD_GLOBAL)
import rivet


def texify(s):
    t = s \
        .replace(r"&", r"\&") \
        .replace(r"\\&", r"\&") \
        .replace(r"#", r"\#") \
        .replace(r"->", r"\ensuremath{\to}") \
        .replace(r"pT", r"\pT") \
        .replace(r"sqrt(s)", r"\ensuremath{\sqrt{s}}")
        # .replace(r"_", r"\_") \
        # .replace(r"^", r"") \
    return t


## Build analysis pages
all_analyses = rivet.AnalysisLoader.analysisNames()
pages = { "LEP":[], "Tevatron":[], "HERA":[], "RHIC":[], "Monte Carlo":[], "Example":[], "Misc.":[] }
## Use list(...) ctor for 2.3 compatibility
for aname in sorted(list(all_analyses)):
    page = ""
    ana = rivet.AnalysisLoader.getAnalysis(aname)
    page += "\\typeout{Handling analysis %s}\n" % aname
    page += "\\subsection{%s}\n" % aname.replace(r"_", r"\_")
    page += "\\textbf{%s}\\newline\n" %  ana.summary()
    if ana.experiment():
        page += "\\textbf{Experiment:} %s (%s) \\newline\n" % (ana.experiment(), ana.collider())
    if ana.spiresId():
        spiresbase = "http://www.slac.stanford.edu/spires/find/hep/www?rawcmd=key"
        page += "\\textbf{Spires ID:} \\href{%s+%s}{%s}\\newline\n" % \
            (spiresbase, ana.spiresId(), ana.spiresId())
    page += "\\textbf{Status:} %s\\newline\n" % ana.status()


    if ana.authors():
        page += "\\textbf{Authors:}\n \\penalty 100\n"
        page += "\\begin{itemize}\n"
        for a in ana.authors():
            s = a
            import re
            if re.search(".* <.*@.*>", a):
                name = " ".join(a.split()[:-1])
                email = a.split()[-1].replace("<", "").replace(">", "")
                #s = "\\href{mailto:%s}{%s}" % (email, name)
                s = "%s $\\langle\,$\\href{mailto:%s}{%s}$\,\\rangle$;" % (name, email, email)
            page += "  \\item %s\n" % s
        page += "\\end{itemize}\n"
    else:
        page += "\\textbf{No authors listed}\\\\ \n"


    if ana.references():
        page += "\\textbf{References:}\n \\penalty 100\n"
        page += "\\begin{itemize}\n"
        for r in ana.references():
            if r.startswith("arXiv:"):
                code = r.split()[0].replace("arXiv:", "")
                url = "http://arxiv.org/abs/" + code
                page += "  \\item %s \\href{%s}{%s}\n" % ("arXiv:", url, code)
            elif r.startswith("doi:"):
                code = r.replace("doi:", "")
                url = "http://dx.doi.org/" + code
                page += "  \\item %s \\href{%s}{%s}\n" % ("DOI:", url, code)
            else:
                page += "  \\item %s\n" % r
        page += "\\end{itemize}\n"
    else:
        page += "\\textbf{No references listed}\\\\ \n"


    if ana.runInfo():
        page += "\\textbf{Run details:}\n \\penalty 100\n"
        page += "\\begin{itemize}\n"
        #print ana.runInfo()
        for l in ana.runInfo().split("\n*"):
            l = l.strip()
            if l.startswith("*"):
                l = l[1:].strip()
            page += "  \\item %s\n" % l
        page += "\\end{itemize}\n"
    else:
        page += "\\textbf{No run details listed}\\\\ \n"


    for para in ana.description().split("\n\n"):
        page += "\n\\noindent " + para + "\n"


    try:
        import readplot
        info = readplot.plotinfo(ana.name())
        if info:
            page += "\n\\vspace{1em}\n\\noindent\n"
            page += "\\textbf{Histograms:}\n \\penalty 100\n"
            page += "\\begin{itemize}\n"
            for hpath in sorted(info.keys()):
                htitle = info[hpath]["TITLE"]
                page += "  \\item %s (\kbd{%s})\n" % (htitle, hpath.replace(r"_", r"\_"))
            page += "\\end{itemize}\n"
    except:
        pass 

    page += "\n\\clearpage\n"

    page = texify(page)


    if "MC_" in ana.name().upper():
        pages["Monte Carlo"].append(page)
    elif "LEP" in ana.collider():
        pages["LEP"].append(page)
    elif "Tevatron" in ana.collider():
        pages["Tevatron"].append(page)
    elif "HERA" in ana.collider():
        pages["HERA"].append(page)
    elif "RHIC" in ana.collider():
        pages["RHIC"].append(page)
    elif "EXAMPLE" in ana.name().upper():
        pages["Example"].append(page)
    else:
        pages["Misc."].append(page)


## Write out LaTeX
prefix = """\
\\makeatletter
\\renewcommand{\\d}[1]{\\ensuremath{\\mathrm{#1}}}
\\let\\old@eta\\eta
\\renewcommand{\\eta}{\\ensuremath{\\old@eta}\\xspace}
\\let\\old@phi\\phi
\\renewcommand{\\phi}{\\ensuremath{\\old@phi}\\xspace}
\\providecommand{\\pT}{\\ensuremath{p_\\perp}\\xspace}
\\providecommand{\\pTmin}{\\ensuremath{p_\\perp^\\text{min}}\\xspace}
\\makeatother

"""


groups = {}
for group, ps in pages.iteritems():
    s = ""
    #if len(ps):
    s = "\\section{%s analyses}" % group + "\n\n\\clearpage\n\n".join(ps)
    groups[group] = s

body = \
    groups["LEP"] + "\n\n" + \
    groups["Tevatron"] + "\n\n" + \
    groups["HERA"] + "\n\n" + \
    groups["RHIC"] + "\n\n" + \
    groups["Monte Carlo"] + "\n\n" + \
    groups["Example"] + "\n\n" + \
    groups["Misc."] + "\n\n"

outstr = prefix + body

if OUTFILE == "-":
    sys.stdout.write(outstr)
else:
    f = open(OUTFILE, "w")
    f.write(outstr)
    f.close()
