#! /usr/bin/env python


## Get output filename
import sys
if len(sys.argv) < 2:
    print "You must supply the output file as an argument"
    exit(1)
OUTFILE = sys.argv[1]


## Make "set" a builtin type on Python < 2.4
if not 'set' in dir(__builtins__):
    from sets import Set as set

## Make "sorted" a builtin function on Python < 2.4
if not 'sorted' in dir(__builtins__):
    def sorted(iterable, cmp=None, key=None, reverse=None):
        rtn = iterable
        rtn.sort(cmp, key, reverse)
        return rtn

        
## Change dlopen status to GLOBAL for Rivet lib
try:
    import ctypes
    sys.setdlopenflags(sys.getdlopenflags() | ctypes.RTLD_GLOBAL)
except:
    import dl
    sys.setdlopenflags(sys.getdlopenflags() | dl.RTLD_GLOBAL)
import rivet


def texify(s):
    t = s \
        .replace("&", "\\&") \
        .replace("->", "\\ensuremath{\\to}") \
        .replace("_", "\\_") \
        .replace("^", "") \
        .replace("pT", "\\pT") \
        .replace("sqrt{s}", "\\ensuremath{\\sqrt{s}}")
    return t


## Build analysis pages
all_analyses = rivet.AnalysisLoader.allAnalysisNames()
pages = []
for aname in sorted(all_analyses):
    page = ""
    ana = rivet.AnalysisLoader.getAnalysis(aname)
    page += "\\section*{%s}\n" % aname
    page += "\\textbf{%s}\\newline\n" %  ana.summary()
    page += "\\textbf{Experiment:} %s (%s) \\newline\n" % (ana.experiment(), ana.collider())
    spiresbase = "http://www.slac.stanford.edu/spires/find/hep/www?rawcmd=key"
    page += "\\textbf{Spires ID:} \\href{%s+%s}{%s}\\newline\n" % \
        (spiresbase, ana.spiresId(), ana.spiresId())
    page += "\\textbf{Status:} %s\\newline\n" % ana.status()


    if ana.authors():
        page += "\\textbf{Authors:}\n \\penalty 100"
        page += "\\begin{itemize}\n"
        for a in ana.authors():
            s = a
            import re
            if re.search(".* <.*@.*>", a):
                name = " ".join(a.split()[:-1])
                email = a.split()[-1].replace("<", "").replace(">", "")
                s = "\\href{mailto:%s}{%s}" % (email, name)
            page += "  \\item %s\n" % s
        page += "\\end{itemize}\n"
    else:
        page += "\\textbf{No authors listed}\n"


    if ana.references():
        page += "\\textbf{References:}\n \\penalty 100"
        page += "\\begin{itemize}\n"
        for r in ana.references():
            if r.startswith("arXiv:"):
                code = r.split()[0].replace("arXiv:", "")
                url = "http://arxiv.org/abs/" + code
                page += "  \\item %s \\href{%s}{%s}\n" % ("arXiv:", url, code)
            elif r.startswith("doi:"):
                code = r.replace("doi:", "")
                url = "http://dx.doi.org/" + code
                page += "  \\item %s \\href{%s}{%s}\n" % ("DOI:", url, code)
            else:
                page += "  \\item %s\n" % r
        page += "\\end{itemize}\n"
    else:
        page += "\\textbf{No references listed}\n"


    if ana.runInfo():
        page += "\\textbf{Run details:}\n \\penalty 100"
        page += "\\begin{itemize}\n"
        #print ana.runInfo()
        for l in ana.runInfo().split("\n*"):
            l = l.strip()
            if l.startswith("*"):
                l = l[1:].strip()
            page += "  \\item %s\n" % l
        page += "\\end{itemize}\n"
    else:
        page += "\\textbf{No run details listed}\n"


    page += "\n\\noindent " + ana.description() + "\n"

    page += "\n\\clearpage\n"

    page = texify(page)
    pages.append(page)



## Write out LaTeX
prefix = """\
\\makeatletter
\\renewcommand{\\d}[1]{\\ensuremath{\\mathrm{#1}}}
\\let\\old@eta\\eta
\\renewcommand{\\eta}{\\ensuremath{\\old@eta}\\xspace}
\\let\\old@phi\\phi
\\renewcommand{\\phi}{\\ensuremath{\\old@phi}\\xspace}
\\providecommand{\\pT}{\\ensuremath{p_\\perp}\\xspace}
\\providecommand{\\pTmin}{\\ensuremath{p_\\perp^\\text{min}}\\xspace}
\\makeatother

"""
#body = "\n\n\\clearpage\n\n".join(pages)
body = "\n\n\\vspace{1cm}\n\n".join(pages)
outstr = prefix + body
f = open(OUTFILE, "w")
f.write(outstr)
f.close()
